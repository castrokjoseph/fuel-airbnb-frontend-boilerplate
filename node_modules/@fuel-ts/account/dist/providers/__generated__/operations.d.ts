import type { DocumentNode } from 'graphql';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
    Address: string;
    AssetId: string;
    BlockId: string;
    Bytes32: string;
    ContractId: string;
    HexString: string;
    Nonce: string;
    RelayedTransactionId: string;
    Salt: string;
    Signature: string;
    Tai64Timestamp: string;
    TransactionId: string;
    TxPointer: string;
    U16: string;
    U32: string;
    U64: string;
    UtxoId: string;
};
export type GqlBalance = {
    amount: Scalars['U64'];
    assetId: Scalars['AssetId'];
    owner: Scalars['Address'];
};
export type GqlBalanceConnection = {
    /** A list of edges. */
    edges: Array<GqlBalanceEdge>;
    /** A list of nodes. */
    nodes: Array<GqlBalance>;
    /** Information to aid in pagination. */
    pageInfo: GqlPageInfo;
};
/** An edge in a connection. */
export type GqlBalanceEdge = {
    /** A cursor for use in pagination */
    cursor: Scalars['String'];
    /** The item at the end of the edge */
    node: GqlBalance;
};
export type GqlBalanceFilterInput = {
    /** Filter coins based on the `owner` field */
    owner: Scalars['Address'];
};
export type GqlBlock = {
    consensus: GqlConsensus;
    header: GqlHeader;
    height: Scalars['U32'];
    id: Scalars['BlockId'];
    transactions: Array<GqlTransaction>;
};
export type GqlBlockConnection = {
    /** A list of edges. */
    edges: Array<GqlBlockEdge>;
    /** A list of nodes. */
    nodes: Array<GqlBlock>;
    /** Information to aid in pagination. */
    pageInfo: GqlPageInfo;
};
/** An edge in a connection. */
export type GqlBlockEdge = {
    /** A cursor for use in pagination */
    cursor: Scalars['String'];
    /** The item at the end of the edge */
    node: GqlBlock;
};
/** Breakpoint, defined as a tuple of contract ID and relative PC offset inside it */
export type GqlBreakpoint = {
    contract: Scalars['ContractId'];
    pc: Scalars['U64'];
};
export type GqlChainInfo = {
    consensusParameters: GqlConsensusParameters;
    daHeight: Scalars['U64'];
    gasCosts: GqlGasCosts;
    latestBlock: GqlBlock;
    name: Scalars['String'];
};
export type GqlChangeOutput = {
    amount: Scalars['U64'];
    assetId: Scalars['AssetId'];
    to: Scalars['Address'];
};
export type GqlCoin = {
    amount: Scalars['U64'];
    assetId: Scalars['AssetId'];
    /** TxPointer - the height of the block this coin was created in */
    blockCreated: Scalars['U32'];
    owner: Scalars['Address'];
    /** TxPointer - the index of the transaction that created this coin */
    txCreatedIdx: Scalars['U16'];
    utxoId: Scalars['UtxoId'];
};
export type GqlCoinConnection = {
    /** A list of edges. */
    edges: Array<GqlCoinEdge>;
    /** A list of nodes. */
    nodes: Array<GqlCoin>;
    /** Information to aid in pagination. */
    pageInfo: GqlPageInfo;
};
/** An edge in a connection. */
export type GqlCoinEdge = {
    /** A cursor for use in pagination */
    cursor: Scalars['String'];
    /** The item at the end of the edge */
    node: GqlCoin;
};
export type GqlCoinFilterInput = {
    /** Returns coins only with `asset_id`. */
    assetId?: InputMaybe<Scalars['AssetId']>;
    /** Returns coins owned by the `owner`. */
    owner: Scalars['Address'];
};
export type GqlCoinOutput = {
    amount: Scalars['U64'];
    assetId: Scalars['AssetId'];
    to: Scalars['Address'];
};
/** The schema analog of the [`coins::CoinType`]. */
export type GqlCoinType = GqlCoin | GqlMessageCoin;
export type GqlConsensus = GqlGenesis | GqlPoAConsensus;
export type GqlConsensusParameters = {
    baseAssetId: Scalars['AssetId'];
    blockGasLimit: Scalars['U64'];
    chainId: Scalars['U64'];
    contractParams: GqlContractParameters;
    feeParams: GqlFeeParameters;
    gasCosts: GqlGasCosts;
    predicateParams: GqlPredicateParameters;
    privilegedAddress: Scalars['Address'];
    scriptParams: GqlScriptParameters;
    txParams: GqlTxParameters;
    version: GqlConsensusParametersVersion;
};
export type GqlConsensusParametersPurpose = {
    checksum: Scalars['Bytes32'];
    witnessIndex: Scalars['U16'];
};
export declare enum GqlConsensusParametersVersion {
    V1 = "V1"
}
export type GqlContract = {
    bytecode: Scalars['HexString'];
    id: Scalars['ContractId'];
    salt: Scalars['Salt'];
};
export type GqlContractBalance = {
    amount: Scalars['U64'];
    assetId: Scalars['AssetId'];
    contract: Scalars['ContractId'];
};
export type GqlContractBalanceConnection = {
    /** A list of edges. */
    edges: Array<GqlContractBalanceEdge>;
    /** A list of nodes. */
    nodes: Array<GqlContractBalance>;
    /** Information to aid in pagination. */
    pageInfo: GqlPageInfo;
};
/** An edge in a connection. */
export type GqlContractBalanceEdge = {
    /** A cursor for use in pagination */
    cursor: Scalars['String'];
    /** The item at the end of the edge */
    node: GqlContractBalance;
};
export type GqlContractBalanceFilterInput = {
    /** Filter assets based on the `contractId` field */
    contract: Scalars['ContractId'];
};
export type GqlContractCreated = {
    contract: Scalars['ContractId'];
    stateRoot: Scalars['Bytes32'];
};
export type GqlContractOutput = {
    balanceRoot: Scalars['Bytes32'];
    inputIndex: Scalars['U16'];
    stateRoot: Scalars['Bytes32'];
};
export type GqlContractParameters = {
    contractMaxSize: Scalars['U64'];
    maxStorageSlots: Scalars['U64'];
    version: GqlContractParametersVersion;
};
export declare enum GqlContractParametersVersion {
    V1 = "V1"
}
export type GqlDependentCost = GqlHeavyOperation | GqlLightOperation;
export type GqlDryRunFailureStatus = {
    programState?: Maybe<GqlProgramState>;
    reason: Scalars['String'];
    receipts: Array<GqlReceipt>;
    totalFee: Scalars['U64'];
    totalGas: Scalars['U64'];
};
export type GqlDryRunSuccessStatus = {
    programState?: Maybe<GqlProgramState>;
    receipts: Array<GqlReceipt>;
    totalFee: Scalars['U64'];
    totalGas: Scalars['U64'];
};
export type GqlDryRunTransactionExecutionStatus = {
    id: Scalars['TransactionId'];
    receipts: Array<GqlReceipt>;
    status: GqlDryRunTransactionStatus;
};
export type GqlDryRunTransactionStatus = GqlDryRunFailureStatus | GqlDryRunSuccessStatus;
export type GqlEstimateGasPrice = {
    gasPrice: Scalars['U64'];
};
export type GqlExcludeInput = {
    /** Messages to exclude from the selection. */
    messages: Array<Scalars['Nonce']>;
    /** Utxos to exclude from the selection. */
    utxos: Array<Scalars['UtxoId']>;
};
export type GqlFailureStatus = {
    block: GqlBlock;
    programState?: Maybe<GqlProgramState>;
    reason: Scalars['String'];
    receipts: Array<GqlReceipt>;
    time: Scalars['Tai64Timestamp'];
    totalFee: Scalars['U64'];
    totalGas: Scalars['U64'];
    transactionId: Scalars['TransactionId'];
};
export type GqlFeeParameters = {
    gasPerByte: Scalars['U64'];
    gasPriceFactor: Scalars['U64'];
    version: GqlFeeParametersVersion;
};
export declare enum GqlFeeParametersVersion {
    V1 = "V1"
}
export type GqlGasCosts = {
    add: Scalars['U64'];
    addi: Scalars['U64'];
    aloc: Scalars['U64'];
    and: Scalars['U64'];
    andi: Scalars['U64'];
    bal: Scalars['U64'];
    bhei: Scalars['U64'];
    bhsh: Scalars['U64'];
    burn: Scalars['U64'];
    call: GqlDependentCost;
    cb: Scalars['U64'];
    ccp: GqlDependentCost;
    cfei: Scalars['U64'];
    cfsi: Scalars['U64'];
    contractRoot: GqlDependentCost;
    croo: GqlDependentCost;
    csiz: GqlDependentCost;
    div: Scalars['U64'];
    divi: Scalars['U64'];
    eck1: Scalars['U64'];
    ecr1: Scalars['U64'];
    ed19: Scalars['U64'];
    eq: Scalars['U64'];
    exp: Scalars['U64'];
    expi: Scalars['U64'];
    flag: Scalars['U64'];
    gm: Scalars['U64'];
    gt: Scalars['U64'];
    gtf: Scalars['U64'];
    ji: Scalars['U64'];
    jmp: Scalars['U64'];
    jmpb: Scalars['U64'];
    jmpf: Scalars['U64'];
    jne: Scalars['U64'];
    jneb: Scalars['U64'];
    jnef: Scalars['U64'];
    jnei: Scalars['U64'];
    jnzb: Scalars['U64'];
    jnzf: Scalars['U64'];
    jnzi: Scalars['U64'];
    k256: GqlDependentCost;
    lb: Scalars['U64'];
    ldc: GqlDependentCost;
    log: Scalars['U64'];
    logd: GqlDependentCost;
    lt: Scalars['U64'];
    lw: Scalars['U64'];
    mcl: GqlDependentCost;
    mcli: GqlDependentCost;
    mcp: GqlDependentCost;
    mcpi: GqlDependentCost;
    meq: GqlDependentCost;
    mint: Scalars['U64'];
    mldv: Scalars['U64'];
    mlog: Scalars['U64'];
    modOp: Scalars['U64'];
    modi: Scalars['U64'];
    moveOp: Scalars['U64'];
    movi: Scalars['U64'];
    mroo: Scalars['U64'];
    mul: Scalars['U64'];
    muli: Scalars['U64'];
    newStoragePerByte: Scalars['U64'];
    noop: Scalars['U64'];
    not: Scalars['U64'];
    or: Scalars['U64'];
    ori: Scalars['U64'];
    poph: Scalars['U64'];
    popl: Scalars['U64'];
    pshh: Scalars['U64'];
    pshl: Scalars['U64'];
    ret: Scalars['U64'];
    retd: GqlDependentCost;
    rvrt: Scalars['U64'];
    s256: GqlDependentCost;
    sb: Scalars['U64'];
    scwq: GqlDependentCost;
    sll: Scalars['U64'];
    slli: Scalars['U64'];
    smo: GqlDependentCost;
    srl: Scalars['U64'];
    srli: Scalars['U64'];
    srw: Scalars['U64'];
    srwq: GqlDependentCost;
    stateRoot: GqlDependentCost;
    sub: Scalars['U64'];
    subi: Scalars['U64'];
    sw: Scalars['U64'];
    sww: Scalars['U64'];
    swwq: GqlDependentCost;
    time: Scalars['U64'];
    tr: Scalars['U64'];
    tro: Scalars['U64'];
    version: GqlGasCostsVersion;
    vmInitialization: GqlDependentCost;
    wdam: Scalars['U64'];
    wdcm: Scalars['U64'];
    wddv: Scalars['U64'];
    wdmd: Scalars['U64'];
    wdml: Scalars['U64'];
    wdmm: Scalars['U64'];
    wdop: Scalars['U64'];
    wqam: Scalars['U64'];
    wqcm: Scalars['U64'];
    wqdv: Scalars['U64'];
    wqmd: Scalars['U64'];
    wqml: Scalars['U64'];
    wqmm: Scalars['U64'];
    wqop: Scalars['U64'];
    xor: Scalars['U64'];
    xori: Scalars['U64'];
};
export declare enum GqlGasCostsVersion {
    V1 = "V1"
}
export type GqlGenesis = {
    /**
     * The chain configs define what consensus type to use, what settlement layer to use,
     * rules of block validity, etc.
     */
    chainConfigHash: Scalars['Bytes32'];
    /** The Binary Merkle Tree root of all genesis coins. */
    coinsRoot: Scalars['Bytes32'];
    /** The Binary Merkle Tree root of state, balances, contracts code hash of each contract. */
    contractsRoot: Scalars['Bytes32'];
    /** The Binary Merkle Tree root of all genesis messages. */
    messagesRoot: Scalars['Bytes32'];
    /** The Binary Merkle Tree root of all processed transaction ids. */
    transactionsRoot: Scalars['Bytes32'];
};
export type GqlHeader = {
    /** Hash of the application header. */
    applicationHash: Scalars['Bytes32'];
    /** The version of the consensus parameters used to create this block. */
    consensusParametersVersion: Scalars['U32'];
    /** The layer 1 height of messages and events to include since the last layer 1 block number. */
    daHeight: Scalars['U64'];
    /** Merkle root of inbox events in this block. */
    eventInboxRoot: Scalars['Bytes32'];
    /** Fuel block height. */
    height: Scalars['U32'];
    /** Hash of the header */
    id: Scalars['BlockId'];
    /** Merkle root of message receipts in this block. */
    messageOutboxRoot: Scalars['Bytes32'];
    /** Number of message receipts in this block. */
    messageReceiptCount: Scalars['U32'];
    /** Merkle root of all previous block header hashes. */
    prevRoot: Scalars['Bytes32'];
    /** The version of the state transition bytecode used to create this block. */
    stateTransitionBytecodeVersion: Scalars['U32'];
    /** The block producer time. */
    time: Scalars['Tai64Timestamp'];
    /** Number of transactions in this block. */
    transactionsCount: Scalars['U16'];
    /** Merkle root of transactions. */
    transactionsRoot: Scalars['Bytes32'];
};
export type GqlHeavyOperation = {
    base: Scalars['U64'];
    gasPerUnit: Scalars['U64'];
};
export type GqlInput = GqlInputCoin | GqlInputContract | GqlInputMessage;
export type GqlInputCoin = {
    amount: Scalars['U64'];
    assetId: Scalars['AssetId'];
    owner: Scalars['Address'];
    predicate: Scalars['HexString'];
    predicateData: Scalars['HexString'];
    predicateGasUsed: Scalars['U64'];
    txPointer: Scalars['TxPointer'];
    utxoId: Scalars['UtxoId'];
    witnessIndex: Scalars['Int'];
};
export type GqlInputContract = {
    balanceRoot: Scalars['Bytes32'];
    contractId: Scalars['ContractId'];
    stateRoot: Scalars['Bytes32'];
    txPointer: Scalars['TxPointer'];
    utxoId: Scalars['UtxoId'];
};
export type GqlInputMessage = {
    amount: Scalars['U64'];
    data: Scalars['HexString'];
    nonce: Scalars['Nonce'];
    predicate: Scalars['HexString'];
    predicateData: Scalars['HexString'];
    predicateGasUsed: Scalars['U64'];
    recipient: Scalars['Address'];
    sender: Scalars['Address'];
    witnessIndex: Scalars['U16'];
};
export type GqlLatestGasPrice = {
    blockHeight: Scalars['U32'];
    gasPrice: Scalars['U64'];
};
export type GqlLightOperation = {
    base: Scalars['U64'];
    unitsPerGas: Scalars['U64'];
};
export type GqlMerkleProof = {
    proofIndex: Scalars['U64'];
    proofSet: Array<Scalars['Bytes32']>;
};
export type GqlMessage = {
    amount: Scalars['U64'];
    daHeight: Scalars['U64'];
    data: Scalars['HexString'];
    nonce: Scalars['Nonce'];
    recipient: Scalars['Address'];
    sender: Scalars['Address'];
};
export type GqlMessageCoin = {
    amount: Scalars['U64'];
    assetId: Scalars['AssetId'];
    daHeight: Scalars['U64'];
    nonce: Scalars['Nonce'];
    recipient: Scalars['Address'];
    sender: Scalars['Address'];
};
export type GqlMessageConnection = {
    /** A list of edges. */
    edges: Array<GqlMessageEdge>;
    /** A list of nodes. */
    nodes: Array<GqlMessage>;
    /** Information to aid in pagination. */
    pageInfo: GqlPageInfo;
};
/** An edge in a connection. */
export type GqlMessageEdge = {
    /** A cursor for use in pagination */
    cursor: Scalars['String'];
    /** The item at the end of the edge */
    node: GqlMessage;
};
export type GqlMessageProof = {
    amount: Scalars['U64'];
    blockProof: GqlMerkleProof;
    commitBlockHeader: GqlHeader;
    data: Scalars['HexString'];
    messageBlockHeader: GqlHeader;
    messageProof: GqlMerkleProof;
    nonce: Scalars['Nonce'];
    recipient: Scalars['Address'];
    sender: Scalars['Address'];
};
export declare enum GqlMessageState {
    NotFound = "NOT_FOUND",
    Spent = "SPENT",
    Unspent = "UNSPENT"
}
export type GqlMessageStatus = {
    state: GqlMessageState;
};
export type GqlMutation = {
    /**
     * Resume execution of the VM instance after a breakpoint.
     * Runs until the next breakpoint or until the transaction completes.
     */
    continueTx: GqlRunResult;
    /** Execute a dry-run of multiple transactions using a fork of current state, no changes are committed. */
    dryRun: Array<GqlDryRunTransactionExecutionStatus>;
    /** End debugger session. */
    endSession: Scalars['Boolean'];
    /** Execute a single fuel-asm instruction. */
    execute: Scalars['Boolean'];
    /**
     * Sequentially produces `blocks_to_produce` blocks. The first block starts with
     * `start_timestamp`. If the block production in the [`crate::service::Config`] is
     * `Trigger::Interval { block_time }`, produces blocks with `block_time ` intervals between
     * them. The `start_timestamp` is the timestamp in seconds.
     */
    produceBlocks: Scalars['U32'];
    /** Reset the VM instance to the initial state. */
    reset: Scalars['Boolean'];
    /** Set a breakpoint for a VM instance. */
    setBreakpoint: Scalars['Boolean'];
    /** Set single-stepping mode for the VM instance. */
    setSingleStepping: Scalars['Boolean'];
    /**
     * Initialize a new debugger session, returning its ID.
     * A new VM instance is spawned for each session.
     * The session is run in a separate database transaction,
     * on top of the most recent node state.
     */
    startSession: Scalars['ID'];
    /**
     * Run a single transaction in given session until it
     * hits a breakpoint or completes.
     */
    startTx: GqlRunResult;
    /**
     * Submits transaction to the `TxPool`.
     *
     * Returns submitted transaction if the transaction is included in the `TxPool` without problems.
     */
    submit: GqlTransaction;
};
export type GqlMutationContinueTxArgs = {
    id: Scalars['ID'];
};
export type GqlMutationDryRunArgs = {
    txs: Array<Scalars['HexString']>;
    utxoValidation?: InputMaybe<Scalars['Boolean']>;
};
export type GqlMutationEndSessionArgs = {
    id: Scalars['ID'];
};
export type GqlMutationExecuteArgs = {
    id: Scalars['ID'];
    op: Scalars['String'];
};
export type GqlMutationProduceBlocksArgs = {
    blocksToProduce: Scalars['U32'];
    startTimestamp?: InputMaybe<Scalars['Tai64Timestamp']>;
};
export type GqlMutationResetArgs = {
    id: Scalars['ID'];
};
export type GqlMutationSetBreakpointArgs = {
    breakpoint: GqlBreakpoint;
    id: Scalars['ID'];
};
export type GqlMutationSetSingleSteppingArgs = {
    enable: Scalars['Boolean'];
    id: Scalars['ID'];
};
export type GqlMutationStartTxArgs = {
    id: Scalars['ID'];
    txJson: Scalars['String'];
};
export type GqlMutationSubmitArgs = {
    tx: Scalars['HexString'];
};
export type GqlNodeInfo = {
    maxDepth: Scalars['U64'];
    maxTx: Scalars['U64'];
    nodeVersion: Scalars['String'];
    peers: Array<GqlPeerInfo>;
    utxoValidation: Scalars['Boolean'];
    vmBacktrace: Scalars['Boolean'];
};
export type GqlOutput = GqlChangeOutput | GqlCoinOutput | GqlContractCreated | GqlContractOutput | GqlVariableOutput;
/**
 * A separate `Breakpoint` type to be used as an output, as a single
 * type cannot act as both input and output type in async-graphql
 */
export type GqlOutputBreakpoint = {
    contract: Scalars['ContractId'];
    pc: Scalars['U64'];
};
/** Information about pagination in a connection */
export type GqlPageInfo = {
    /** When paginating forwards, the cursor to continue. */
    endCursor?: Maybe<Scalars['String']>;
    /** When paginating forwards, are there more items? */
    hasNextPage: Scalars['Boolean'];
    /** When paginating backwards, are there more items? */
    hasPreviousPage: Scalars['Boolean'];
    /** When paginating backwards, the cursor to continue. */
    startCursor?: Maybe<Scalars['String']>;
};
export type GqlPeerInfo = {
    /** The advertised multi-addrs that can be used to connect to this peer */
    addresses: Array<Scalars['String']>;
    /** The internal fuel p2p reputation of this peer */
    appScore: Scalars['Float'];
    /** The last reported height of the peer */
    blockHeight?: Maybe<Scalars['U32']>;
    /** The self-reported version of the client the peer is using */
    clientVersion?: Maybe<Scalars['String']>;
    /** The libp2p peer id */
    id: Scalars['String'];
    /** The last heartbeat from this peer in unix epoch time ms */
    lastHeartbeatMs: Scalars['U64'];
};
export type GqlPoAConsensus = {
    /** Gets the signature of the block produced by `PoA` consensus. */
    signature: Scalars['Signature'];
};
export type GqlPolicies = {
    maturity?: Maybe<Scalars['U32']>;
    maxFee?: Maybe<Scalars['U64']>;
    tip?: Maybe<Scalars['U64']>;
    witnessLimit?: Maybe<Scalars['U64']>;
};
export type GqlPredicateParameters = {
    maxGasPerPredicate: Scalars['U64'];
    maxMessageDataLength: Scalars['U64'];
    maxPredicateDataLength: Scalars['U64'];
    maxPredicateLength: Scalars['U64'];
    version: GqlPredicateParametersVersion;
};
export declare enum GqlPredicateParametersVersion {
    V1 = "V1"
}
export type GqlProgramState = {
    data: Scalars['HexString'];
    returnType: GqlReturnType;
};
export type GqlQuery = {
    balance: GqlBalance;
    balances: GqlBalanceConnection;
    block?: Maybe<GqlBlock>;
    blocks: GqlBlockConnection;
    chain: GqlChainInfo;
    /** Gets the coin by `utxo_id`. */
    coin?: Maybe<GqlCoin>;
    /** Gets all unspent coins of some `owner` maybe filtered with by `asset_id` per page. */
    coins: GqlCoinConnection;
    /**
     * For each `query_per_asset`, get some spendable coins(of asset specified by the query) owned by
     * `owner` that add up at least the query amount. The returned coins can be spent.
     * The number of coins is optimized to prevent dust accumulation.
     *
     * The query supports excluding and maximum the number of coins.
     *
     * Returns:
     * The list of spendable coins per asset from the query. The length of the result is
     * the same as the length of `query_per_asset`. The ordering of assets and `query_per_asset`
     * is the same.
     */
    coinsToSpend: Array<Array<GqlCoinType>>;
    contract?: Maybe<GqlContract>;
    contractBalance: GqlContractBalance;
    contractBalances: GqlContractBalanceConnection;
    estimateGasPrice: GqlEstimateGasPrice;
    /** Estimate the predicate gas for the provided transaction */
    estimatePredicates: GqlTransaction;
    /** Returns true when the GraphQL API is serving requests. */
    health: Scalars['Boolean'];
    latestGasPrice: GqlLatestGasPrice;
    /** Read read a range of memory bytes. */
    memory: Scalars['String'];
    message?: Maybe<GqlMessage>;
    messageProof?: Maybe<GqlMessageProof>;
    messageStatus: GqlMessageStatus;
    messages: GqlMessageConnection;
    nodeInfo: GqlNodeInfo;
    /** Read register value by index. */
    register: Scalars['U64'];
    relayedTransactionStatus?: Maybe<GqlRelayedTransactionStatus>;
    transaction?: Maybe<GqlTransaction>;
    transactions: GqlTransactionConnection;
    transactionsByOwner: GqlTransactionConnection;
};
export type GqlQueryBalanceArgs = {
    assetId: Scalars['AssetId'];
    owner: Scalars['Address'];
};
export type GqlQueryBalancesArgs = {
    after?: InputMaybe<Scalars['String']>;
    before?: InputMaybe<Scalars['String']>;
    filter: GqlBalanceFilterInput;
    first?: InputMaybe<Scalars['Int']>;
    last?: InputMaybe<Scalars['Int']>;
};
export type GqlQueryBlockArgs = {
    height?: InputMaybe<Scalars['U32']>;
    id?: InputMaybe<Scalars['BlockId']>;
};
export type GqlQueryBlocksArgs = {
    after?: InputMaybe<Scalars['String']>;
    before?: InputMaybe<Scalars['String']>;
    first?: InputMaybe<Scalars['Int']>;
    last?: InputMaybe<Scalars['Int']>;
};
export type GqlQueryCoinArgs = {
    utxoId: Scalars['UtxoId'];
};
export type GqlQueryCoinsArgs = {
    after?: InputMaybe<Scalars['String']>;
    before?: InputMaybe<Scalars['String']>;
    filter: GqlCoinFilterInput;
    first?: InputMaybe<Scalars['Int']>;
    last?: InputMaybe<Scalars['Int']>;
};
export type GqlQueryCoinsToSpendArgs = {
    excludedIds?: InputMaybe<GqlExcludeInput>;
    owner: Scalars['Address'];
    queryPerAsset: Array<GqlSpendQueryElementInput>;
};
export type GqlQueryContractArgs = {
    id: Scalars['ContractId'];
};
export type GqlQueryContractBalanceArgs = {
    asset: Scalars['AssetId'];
    contract: Scalars['ContractId'];
};
export type GqlQueryContractBalancesArgs = {
    after?: InputMaybe<Scalars['String']>;
    before?: InputMaybe<Scalars['String']>;
    filter: GqlContractBalanceFilterInput;
    first?: InputMaybe<Scalars['Int']>;
    last?: InputMaybe<Scalars['Int']>;
};
export type GqlQueryEstimateGasPriceArgs = {
    blockHorizon?: InputMaybe<Scalars['U32']>;
};
export type GqlQueryEstimatePredicatesArgs = {
    tx: Scalars['HexString'];
};
export type GqlQueryMemoryArgs = {
    id: Scalars['ID'];
    size: Scalars['U32'];
    start: Scalars['U32'];
};
export type GqlQueryMessageArgs = {
    nonce: Scalars['Nonce'];
};
export type GqlQueryMessageProofArgs = {
    commitBlockHeight?: InputMaybe<Scalars['U32']>;
    commitBlockId?: InputMaybe<Scalars['BlockId']>;
    nonce: Scalars['Nonce'];
    transactionId: Scalars['TransactionId'];
};
export type GqlQueryMessageStatusArgs = {
    nonce: Scalars['Nonce'];
};
export type GqlQueryMessagesArgs = {
    after?: InputMaybe<Scalars['String']>;
    before?: InputMaybe<Scalars['String']>;
    first?: InputMaybe<Scalars['Int']>;
    last?: InputMaybe<Scalars['Int']>;
    owner?: InputMaybe<Scalars['Address']>;
};
export type GqlQueryRegisterArgs = {
    id: Scalars['ID'];
    register: Scalars['U32'];
};
export type GqlQueryRelayedTransactionStatusArgs = {
    id: Scalars['RelayedTransactionId'];
};
export type GqlQueryTransactionArgs = {
    id: Scalars['TransactionId'];
};
export type GqlQueryTransactionsArgs = {
    after?: InputMaybe<Scalars['String']>;
    before?: InputMaybe<Scalars['String']>;
    first?: InputMaybe<Scalars['Int']>;
    last?: InputMaybe<Scalars['Int']>;
};
export type GqlQueryTransactionsByOwnerArgs = {
    after?: InputMaybe<Scalars['String']>;
    before?: InputMaybe<Scalars['String']>;
    first?: InputMaybe<Scalars['Int']>;
    last?: InputMaybe<Scalars['Int']>;
    owner: Scalars['Address'];
};
export type GqlReceipt = {
    amount?: Maybe<Scalars['U64']>;
    assetId?: Maybe<Scalars['AssetId']>;
    /** Set in the case of a Panic receipt to indicate a missing contract input id */
    contractId?: Maybe<Scalars['ContractId']>;
    data?: Maybe<Scalars['HexString']>;
    digest?: Maybe<Scalars['Bytes32']>;
    gas?: Maybe<Scalars['U64']>;
    gasUsed?: Maybe<Scalars['U64']>;
    id?: Maybe<Scalars['ContractId']>;
    is?: Maybe<Scalars['U64']>;
    len?: Maybe<Scalars['U64']>;
    nonce?: Maybe<Scalars['Nonce']>;
    param1?: Maybe<Scalars['U64']>;
    param2?: Maybe<Scalars['U64']>;
    pc?: Maybe<Scalars['U64']>;
    ptr?: Maybe<Scalars['U64']>;
    ra?: Maybe<Scalars['U64']>;
    rb?: Maybe<Scalars['U64']>;
    rc?: Maybe<Scalars['U64']>;
    rd?: Maybe<Scalars['U64']>;
    reason?: Maybe<Scalars['U64']>;
    receiptType: GqlReceiptType;
    recipient?: Maybe<Scalars['Address']>;
    result?: Maybe<Scalars['U64']>;
    sender?: Maybe<Scalars['Address']>;
    subId?: Maybe<Scalars['Bytes32']>;
    to?: Maybe<Scalars['ContractId']>;
    toAddress?: Maybe<Scalars['Address']>;
    val?: Maybe<Scalars['U64']>;
};
export declare enum GqlReceiptType {
    Burn = "BURN",
    Call = "CALL",
    Log = "LOG",
    LogData = "LOG_DATA",
    MessageOut = "MESSAGE_OUT",
    Mint = "MINT",
    Panic = "PANIC",
    Return = "RETURN",
    ReturnData = "RETURN_DATA",
    Revert = "REVERT",
    ScriptResult = "SCRIPT_RESULT",
    Transfer = "TRANSFER",
    TransferOut = "TRANSFER_OUT"
}
export type GqlRelayedTransactionFailed = {
    blockHeight: Scalars['U32'];
    failure: Scalars['String'];
};
export type GqlRelayedTransactionStatus = GqlRelayedTransactionFailed;
export declare enum GqlReturnType {
    Return = "RETURN",
    ReturnData = "RETURN_DATA",
    Revert = "REVERT"
}
export type GqlRunResult = {
    breakpoint?: Maybe<GqlOutputBreakpoint>;
    jsonReceipts: Array<Scalars['String']>;
    state: GqlRunState;
};
export declare enum GqlRunState {
    /** Stopped on a breakpoint */
    Breakpoint = "BREAKPOINT",
    /** All breakpoints have been processed, and the program has terminated */
    Completed = "COMPLETED"
}
export type GqlScriptParameters = {
    maxScriptDataLength: Scalars['U64'];
    maxScriptLength: Scalars['U64'];
    version: GqlScriptParametersVersion;
};
export declare enum GqlScriptParametersVersion {
    V1 = "V1"
}
export type GqlSpendQueryElementInput = {
    /** Target amount for the query. */
    amount: Scalars['U64'];
    /** Identifier of the asset to spend. */
    assetId: Scalars['AssetId'];
    /** The maximum number of currencies for selection. */
    max?: InputMaybe<Scalars['U32']>;
};
export type GqlSqueezedOutStatus = {
    reason: Scalars['String'];
};
export type GqlStateTransitionPurpose = {
    root: Scalars['Bytes32'];
};
export type GqlSubmittedStatus = {
    time: Scalars['Tai64Timestamp'];
};
export type GqlSubscription = {
    /**
     * Returns a stream of status updates for the given transaction id.
     * If the current status is [`TransactionStatus::Success`], [`TransactionStatus::SqueezedOut`]
     * or [`TransactionStatus::Failed`] the stream will return that and end immediately.
     * If the current status is [`TransactionStatus::Submitted`] this will be returned
     * and the stream will wait for a future update.
     *
     * This stream will wait forever so it's advised to use within a timeout.
     *
     * It is possible for the stream to miss an update if it is polled slower
     * then the updates arrive. In such a case the stream will close without
     * a status. If this occurs the stream can simply be restarted to return
     * the latest status.
     */
    statusChange: GqlTransactionStatus;
    /** Submits transaction to the `TxPool` and await either confirmation or failure. */
    submitAndAwait: GqlTransactionStatus;
};
export type GqlSubscriptionStatusChangeArgs = {
    id: Scalars['TransactionId'];
};
export type GqlSubscriptionSubmitAndAwaitArgs = {
    tx: Scalars['HexString'];
};
export type GqlSuccessStatus = {
    block: GqlBlock;
    programState?: Maybe<GqlProgramState>;
    receipts: Array<GqlReceipt>;
    time: Scalars['Tai64Timestamp'];
    totalFee: Scalars['U64'];
    totalGas: Scalars['U64'];
    transactionId: Scalars['TransactionId'];
};
export type GqlTransaction = {
    bytecodeRoot?: Maybe<Scalars['Bytes32']>;
    bytecodeWitnessIndex?: Maybe<Scalars['U16']>;
    id: Scalars['TransactionId'];
    inputAssetIds?: Maybe<Array<Scalars['AssetId']>>;
    inputContract?: Maybe<GqlInputContract>;
    inputContracts?: Maybe<Array<Scalars['ContractId']>>;
    inputs?: Maybe<Array<GqlInput>>;
    isCreate: Scalars['Boolean'];
    isMint: Scalars['Boolean'];
    isScript: Scalars['Boolean'];
    isUpgrade: Scalars['Boolean'];
    isUpload: Scalars['Boolean'];
    maturity?: Maybe<Scalars['U32']>;
    mintAmount?: Maybe<Scalars['U64']>;
    mintAssetId?: Maybe<Scalars['AssetId']>;
    mintGasPrice?: Maybe<Scalars['U64']>;
    outputContract?: Maybe<GqlContractOutput>;
    outputs: Array<GqlOutput>;
    policies?: Maybe<GqlPolicies>;
    proofSet?: Maybe<Array<Scalars['Bytes32']>>;
    /** Return the transaction bytes using canonical encoding */
    rawPayload: Scalars['HexString'];
    receiptsRoot?: Maybe<Scalars['Bytes32']>;
    salt?: Maybe<Scalars['Salt']>;
    script?: Maybe<Scalars['HexString']>;
    scriptData?: Maybe<Scalars['HexString']>;
    scriptGasLimit?: Maybe<Scalars['U64']>;
    status?: Maybe<GqlTransactionStatus>;
    storageSlots?: Maybe<Array<Scalars['HexString']>>;
    subsectionIndex?: Maybe<Scalars['U16']>;
    subsectionsNumber?: Maybe<Scalars['U16']>;
    txPointer?: Maybe<Scalars['TxPointer']>;
    upgradePurpose?: Maybe<GqlUpgradePurpose>;
    witnesses?: Maybe<Array<Scalars['HexString']>>;
};
export type GqlTransactionConnection = {
    /** A list of edges. */
    edges: Array<GqlTransactionEdge>;
    /** A list of nodes. */
    nodes: Array<GqlTransaction>;
    /** Information to aid in pagination. */
    pageInfo: GqlPageInfo;
};
/** An edge in a connection. */
export type GqlTransactionEdge = {
    /** A cursor for use in pagination */
    cursor: Scalars['String'];
    /** The item at the end of the edge */
    node: GqlTransaction;
};
export type GqlTransactionStatus = GqlFailureStatus | GqlSqueezedOutStatus | GqlSubmittedStatus | GqlSuccessStatus;
export type GqlTxParameters = {
    maxBytecodeSubsections: Scalars['U16'];
    maxGasPerTx: Scalars['U64'];
    maxInputs: Scalars['U16'];
    maxOutputs: Scalars['U16'];
    maxSize: Scalars['U64'];
    maxWitnesses: Scalars['U32'];
    version: GqlTxParametersVersion;
};
export declare enum GqlTxParametersVersion {
    V1 = "V1"
}
export type GqlUpgradePurpose = GqlConsensusParametersPurpose | GqlStateTransitionPurpose;
export type GqlVariableOutput = {
    amount: Scalars['U64'];
    assetId: Scalars['AssetId'];
    to: Scalars['Address'];
};
export type GqlSubmittedStatusFragment = {
    time: string;
    type: 'SubmittedStatus';
};
export type GqlSuccessStatusFragment = {
    time: string;
    totalGas: string;
    totalFee: string;
    type: 'SuccessStatus';
    block: {
        id: string;
    };
    programState?: {
        returnType: GqlReturnType;
        data: string;
    } | null;
    receipts: Array<{
        id?: string | null;
        pc?: string | null;
        is?: string | null;
        to?: string | null;
        toAddress?: string | null;
        amount?: string | null;
        assetId?: string | null;
        gas?: string | null;
        param1?: string | null;
        param2?: string | null;
        val?: string | null;
        ptr?: string | null;
        digest?: string | null;
        reason?: string | null;
        ra?: string | null;
        rb?: string | null;
        rc?: string | null;
        rd?: string | null;
        len?: string | null;
        receiptType: GqlReceiptType;
        result?: string | null;
        gasUsed?: string | null;
        data?: string | null;
        sender?: string | null;
        recipient?: string | null;
        nonce?: string | null;
        contractId?: string | null;
        subId?: string | null;
    }>;
};
export type GqlFailureStatusFragment = {
    totalGas: string;
    totalFee: string;
    time: string;
    reason: string;
    type: 'FailureStatus';
    block: {
        id: string;
    };
    receipts: Array<{
        id?: string | null;
        pc?: string | null;
        is?: string | null;
        to?: string | null;
        toAddress?: string | null;
        amount?: string | null;
        assetId?: string | null;
        gas?: string | null;
        param1?: string | null;
        param2?: string | null;
        val?: string | null;
        ptr?: string | null;
        digest?: string | null;
        reason?: string | null;
        ra?: string | null;
        rb?: string | null;
        rc?: string | null;
        rd?: string | null;
        len?: string | null;
        receiptType: GqlReceiptType;
        result?: string | null;
        gasUsed?: string | null;
        data?: string | null;
        sender?: string | null;
        recipient?: string | null;
        nonce?: string | null;
        contractId?: string | null;
        subId?: string | null;
    }>;
};
export type GqlSqueezedOutStatusFragment = {
    reason: string;
    type: 'SqueezedOutStatus';
};
type GqlTransactionStatusFragment_FailureStatus_ = {
    totalGas: string;
    totalFee: string;
    time: string;
    reason: string;
    type: 'FailureStatus';
    block: {
        id: string;
    };
    receipts: Array<{
        id?: string | null;
        pc?: string | null;
        is?: string | null;
        to?: string | null;
        toAddress?: string | null;
        amount?: string | null;
        assetId?: string | null;
        gas?: string | null;
        param1?: string | null;
        param2?: string | null;
        val?: string | null;
        ptr?: string | null;
        digest?: string | null;
        reason?: string | null;
        ra?: string | null;
        rb?: string | null;
        rc?: string | null;
        rd?: string | null;
        len?: string | null;
        receiptType: GqlReceiptType;
        result?: string | null;
        gasUsed?: string | null;
        data?: string | null;
        sender?: string | null;
        recipient?: string | null;
        nonce?: string | null;
        contractId?: string | null;
        subId?: string | null;
    }>;
};
type GqlTransactionStatusFragment_SqueezedOutStatus_ = {
    reason: string;
    type: 'SqueezedOutStatus';
};
type GqlTransactionStatusFragment_SubmittedStatus_ = {
    time: string;
    type: 'SubmittedStatus';
};
type GqlTransactionStatusFragment_SuccessStatus_ = {
    time: string;
    totalGas: string;
    totalFee: string;
    type: 'SuccessStatus';
    block: {
        id: string;
    };
    programState?: {
        returnType: GqlReturnType;
        data: string;
    } | null;
    receipts: Array<{
        id?: string | null;
        pc?: string | null;
        is?: string | null;
        to?: string | null;
        toAddress?: string | null;
        amount?: string | null;
        assetId?: string | null;
        gas?: string | null;
        param1?: string | null;
        param2?: string | null;
        val?: string | null;
        ptr?: string | null;
        digest?: string | null;
        reason?: string | null;
        ra?: string | null;
        rb?: string | null;
        rc?: string | null;
        rd?: string | null;
        len?: string | null;
        receiptType: GqlReceiptType;
        result?: string | null;
        gasUsed?: string | null;
        data?: string | null;
        sender?: string | null;
        recipient?: string | null;
        nonce?: string | null;
        contractId?: string | null;
        subId?: string | null;
    }>;
};
export type GqlTransactionStatusFragment = GqlTransactionStatusFragment_FailureStatus_ | GqlTransactionStatusFragment_SqueezedOutStatus_ | GqlTransactionStatusFragment_SubmittedStatus_ | GqlTransactionStatusFragment_SuccessStatus_;
type GqlTransactionStatusSubscriptionFragment_FailureStatus_ = {
    type: 'FailureStatus';
};
type GqlTransactionStatusSubscriptionFragment_SqueezedOutStatus_ = {
    reason: string;
    type: 'SqueezedOutStatus';
};
type GqlTransactionStatusSubscriptionFragment_SubmittedStatus_ = {
    type: 'SubmittedStatus';
};
type GqlTransactionStatusSubscriptionFragment_SuccessStatus_ = {
    type: 'SuccessStatus';
};
export type GqlTransactionStatusSubscriptionFragment = GqlTransactionStatusSubscriptionFragment_FailureStatus_ | GqlTransactionStatusSubscriptionFragment_SqueezedOutStatus_ | GqlTransactionStatusSubscriptionFragment_SubmittedStatus_ | GqlTransactionStatusSubscriptionFragment_SuccessStatus_;
export type GqlTransactionFragment = {
    id: string;
    rawPayload: string;
    status?: {
        totalGas: string;
        totalFee: string;
        time: string;
        reason: string;
        type: 'FailureStatus';
        block: {
            id: string;
        };
        receipts: Array<{
            id?: string | null;
            pc?: string | null;
            is?: string | null;
            to?: string | null;
            toAddress?: string | null;
            amount?: string | null;
            assetId?: string | null;
            gas?: string | null;
            param1?: string | null;
            param2?: string | null;
            val?: string | null;
            ptr?: string | null;
            digest?: string | null;
            reason?: string | null;
            ra?: string | null;
            rb?: string | null;
            rc?: string | null;
            rd?: string | null;
            len?: string | null;
            receiptType: GqlReceiptType;
            result?: string | null;
            gasUsed?: string | null;
            data?: string | null;
            sender?: string | null;
            recipient?: string | null;
            nonce?: string | null;
            contractId?: string | null;
            subId?: string | null;
        }>;
    } | {
        reason: string;
        type: 'SqueezedOutStatus';
    } | {
        time: string;
        type: 'SubmittedStatus';
    } | {
        time: string;
        totalGas: string;
        totalFee: string;
        type: 'SuccessStatus';
        block: {
            id: string;
        };
        programState?: {
            returnType: GqlReturnType;
            data: string;
        } | null;
        receipts: Array<{
            id?: string | null;
            pc?: string | null;
            is?: string | null;
            to?: string | null;
            toAddress?: string | null;
            amount?: string | null;
            assetId?: string | null;
            gas?: string | null;
            param1?: string | null;
            param2?: string | null;
            val?: string | null;
            ptr?: string | null;
            digest?: string | null;
            reason?: string | null;
            ra?: string | null;
            rb?: string | null;
            rc?: string | null;
            rd?: string | null;
            len?: string | null;
            receiptType: GqlReceiptType;
            result?: string | null;
            gasUsed?: string | null;
            data?: string | null;
            sender?: string | null;
            recipient?: string | null;
            nonce?: string | null;
            contractId?: string | null;
            subId?: string | null;
        }>;
    } | null;
};
type GqlInputEstimatePredicatesFragment_InputCoin_ = {
    predicateGasUsed: string;
};
type GqlInputEstimatePredicatesFragment_InputContract_ = {};
type GqlInputEstimatePredicatesFragment_InputMessage_ = {
    predicateGasUsed: string;
};
export type GqlInputEstimatePredicatesFragment = GqlInputEstimatePredicatesFragment_InputCoin_ | GqlInputEstimatePredicatesFragment_InputContract_ | GqlInputEstimatePredicatesFragment_InputMessage_;
export type GqlTransactionEstimatePredicatesFragment = {
    inputs?: Array<{
        predicateGasUsed: string;
    } | {
        predicateGasUsed: string;
    } | {}> | null;
};
export type GqlDryRunFailureStatusFragment = {
    totalGas: string;
    totalFee: string;
    reason: string;
    type: 'DryRunFailureStatus';
    programState?: {
        returnType: GqlReturnType;
        data: string;
    } | null;
};
export type GqlDryRunSuccessStatusFragment = {
    totalGas: string;
    totalFee: string;
    type: 'DryRunSuccessStatus';
    programState?: {
        returnType: GqlReturnType;
        data: string;
    } | null;
};
export type GqlReceiptFragment = {
    id?: string | null;
    pc?: string | null;
    is?: string | null;
    to?: string | null;
    toAddress?: string | null;
    amount?: string | null;
    assetId?: string | null;
    gas?: string | null;
    param1?: string | null;
    param2?: string | null;
    val?: string | null;
    ptr?: string | null;
    digest?: string | null;
    reason?: string | null;
    ra?: string | null;
    rb?: string | null;
    rc?: string | null;
    rd?: string | null;
    len?: string | null;
    receiptType: GqlReceiptType;
    result?: string | null;
    gasUsed?: string | null;
    data?: string | null;
    sender?: string | null;
    recipient?: string | null;
    nonce?: string | null;
    contractId?: string | null;
    subId?: string | null;
};
type GqlDryRunTransactionStatusFragment_DryRunFailureStatus_ = {
    totalGas: string;
    totalFee: string;
    reason: string;
    type: 'DryRunFailureStatus';
    programState?: {
        returnType: GqlReturnType;
        data: string;
    } | null;
};
type GqlDryRunTransactionStatusFragment_DryRunSuccessStatus_ = {
    totalGas: string;
    totalFee: string;
    type: 'DryRunSuccessStatus';
    programState?: {
        returnType: GqlReturnType;
        data: string;
    } | null;
};
export type GqlDryRunTransactionStatusFragment = GqlDryRunTransactionStatusFragment_DryRunFailureStatus_ | GqlDryRunTransactionStatusFragment_DryRunSuccessStatus_;
export type GqlDryRunTransactionExecutionStatusFragment = {
    id: string;
    status: {
        totalGas: string;
        totalFee: string;
        reason: string;
        type: 'DryRunFailureStatus';
        programState?: {
            returnType: GqlReturnType;
            data: string;
        } | null;
    } | {
        totalGas: string;
        totalFee: string;
        type: 'DryRunSuccessStatus';
        programState?: {
            returnType: GqlReturnType;
            data: string;
        } | null;
    };
    receipts: Array<{
        id?: string | null;
        pc?: string | null;
        is?: string | null;
        to?: string | null;
        toAddress?: string | null;
        amount?: string | null;
        assetId?: string | null;
        gas?: string | null;
        param1?: string | null;
        param2?: string | null;
        val?: string | null;
        ptr?: string | null;
        digest?: string | null;
        reason?: string | null;
        ra?: string | null;
        rb?: string | null;
        rc?: string | null;
        rd?: string | null;
        len?: string | null;
        receiptType: GqlReceiptType;
        result?: string | null;
        gasUsed?: string | null;
        data?: string | null;
        sender?: string | null;
        recipient?: string | null;
        nonce?: string | null;
        contractId?: string | null;
        subId?: string | null;
    }>;
};
export type GqlBlockFragment = {
    id: string;
    height: string;
    header: {
        time: string;
    };
    transactions: Array<{
        id: string;
    }>;
};
export type GqlCoinFragment = {
    utxoId: string;
    owner: string;
    amount: string;
    assetId: string;
    blockCreated: string;
    txCreatedIdx: string;
    type: 'Coin';
};
export type GqlMessageCoinFragment = {
    sender: string;
    recipient: string;
    nonce: string;
    amount: string;
    assetId: string;
    daHeight: string;
    type: 'MessageCoin';
};
export type GqlMessageFragment = {
    amount: string;
    sender: string;
    recipient: string;
    data: string;
    nonce: string;
    daHeight: string;
};
export type GqlMessageProofFragment = {
    sender: string;
    recipient: string;
    nonce: string;
    amount: string;
    data: string;
    messageProof: {
        proofSet: Array<string>;
        proofIndex: string;
    };
    blockProof: {
        proofSet: Array<string>;
        proofIndex: string;
    };
    messageBlockHeader: {
        id: string;
        daHeight: string;
        consensusParametersVersion: string;
        stateTransitionBytecodeVersion: string;
        transactionsCount: string;
        messageReceiptCount: string;
        transactionsRoot: string;
        messageOutboxRoot: string;
        eventInboxRoot: string;
        height: string;
        prevRoot: string;
        time: string;
        applicationHash: string;
    };
    commitBlockHeader: {
        id: string;
        daHeight: string;
        consensusParametersVersion: string;
        stateTransitionBytecodeVersion: string;
        transactionsCount: string;
        messageReceiptCount: string;
        transactionsRoot: string;
        messageOutboxRoot: string;
        eventInboxRoot: string;
        height: string;
        prevRoot: string;
        time: string;
        applicationHash: string;
    };
};
export type GqlBalanceFragment = {
    owner: string;
    amount: string;
    assetId: string;
};
export type GqlTxParametersFragment = {
    version: GqlTxParametersVersion;
    maxInputs: string;
    maxOutputs: string;
    maxWitnesses: string;
    maxGasPerTx: string;
    maxSize: string;
    maxBytecodeSubsections: string;
};
export type GqlPredicateParametersFragment = {
    version: GqlPredicateParametersVersion;
    maxPredicateLength: string;
    maxPredicateDataLength: string;
    maxGasPerPredicate: string;
    maxMessageDataLength: string;
};
export type GqlScriptParametersFragment = {
    version: GqlScriptParametersVersion;
    maxScriptLength: string;
    maxScriptDataLength: string;
};
export type GqlContractParametersFragment = {
    version: GqlContractParametersVersion;
    contractMaxSize: string;
    maxStorageSlots: string;
};
export type GqlFeeParametersFragment = {
    version: GqlFeeParametersVersion;
    gasPriceFactor: string;
    gasPerByte: string;
};
type GqlDependentCostFragment_HeavyOperation_ = {
    base: string;
    gasPerUnit: string;
    type: 'HeavyOperation';
};
type GqlDependentCostFragment_LightOperation_ = {
    base: string;
    unitsPerGas: string;
    type: 'LightOperation';
};
export type GqlDependentCostFragment = GqlDependentCostFragment_HeavyOperation_ | GqlDependentCostFragment_LightOperation_;
export type GqlGasCostsFragment = {
    version: GqlGasCostsVersion;
    add: string;
    addi: string;
    aloc: string;
    and: string;
    andi: string;
    bal: string;
    bhei: string;
    bhsh: string;
    burn: string;
    cb: string;
    cfei: string;
    cfsi: string;
    div: string;
    divi: string;
    ecr1: string;
    eck1: string;
    ed19: string;
    eq: string;
    exp: string;
    expi: string;
    flag: string;
    gm: string;
    gt: string;
    gtf: string;
    ji: string;
    jmp: string;
    jne: string;
    jnei: string;
    jnzi: string;
    jmpf: string;
    jmpb: string;
    jnzf: string;
    jnzb: string;
    jnef: string;
    jneb: string;
    lb: string;
    log: string;
    lt: string;
    lw: string;
    mint: string;
    mlog: string;
    modOp: string;
    modi: string;
    moveOp: string;
    movi: string;
    mroo: string;
    mul: string;
    muli: string;
    mldv: string;
    noop: string;
    not: string;
    or: string;
    ori: string;
    poph: string;
    popl: string;
    pshh: string;
    pshl: string;
    ret: string;
    rvrt: string;
    sb: string;
    sll: string;
    slli: string;
    srl: string;
    srli: string;
    srw: string;
    sub: string;
    subi: string;
    sw: string;
    sww: string;
    time: string;
    tr: string;
    tro: string;
    wdcm: string;
    wqcm: string;
    wdop: string;
    wqop: string;
    wdml: string;
    wqml: string;
    wddv: string;
    wqdv: string;
    wdmd: string;
    wqmd: string;
    wdam: string;
    wqam: string;
    wdmm: string;
    wqmm: string;
    xor: string;
    xori: string;
    newStoragePerByte: string;
    call: {
        base: string;
        gasPerUnit: string;
        type: 'HeavyOperation';
    } | {
        base: string;
        unitsPerGas: string;
        type: 'LightOperation';
    };
    ccp: {
        base: string;
        gasPerUnit: string;
        type: 'HeavyOperation';
    } | {
        base: string;
        unitsPerGas: string;
        type: 'LightOperation';
    };
    croo: {
        base: string;
        gasPerUnit: string;
        type: 'HeavyOperation';
    } | {
        base: string;
        unitsPerGas: string;
        type: 'LightOperation';
    };
    csiz: {
        base: string;
        gasPerUnit: string;
        type: 'HeavyOperation';
    } | {
        base: string;
        unitsPerGas: string;
        type: 'LightOperation';
    };
    k256: {
        base: string;
        gasPerUnit: string;
        type: 'HeavyOperation';
    } | {
        base: string;
        unitsPerGas: string;
        type: 'LightOperation';
    };
    ldc: {
        base: string;
        gasPerUnit: string;
        type: 'HeavyOperation';
    } | {
        base: string;
        unitsPerGas: string;
        type: 'LightOperation';
    };
    logd: {
        base: string;
        gasPerUnit: string;
        type: 'HeavyOperation';
    } | {
        base: string;
        unitsPerGas: string;
        type: 'LightOperation';
    };
    mcl: {
        base: string;
        gasPerUnit: string;
        type: 'HeavyOperation';
    } | {
        base: string;
        unitsPerGas: string;
        type: 'LightOperation';
    };
    mcli: {
        base: string;
        gasPerUnit: string;
        type: 'HeavyOperation';
    } | {
        base: string;
        unitsPerGas: string;
        type: 'LightOperation';
    };
    mcp: {
        base: string;
        gasPerUnit: string;
        type: 'HeavyOperation';
    } | {
        base: string;
        unitsPerGas: string;
        type: 'LightOperation';
    };
    mcpi: {
        base: string;
        gasPerUnit: string;
        type: 'HeavyOperation';
    } | {
        base: string;
        unitsPerGas: string;
        type: 'LightOperation';
    };
    meq: {
        base: string;
        gasPerUnit: string;
        type: 'HeavyOperation';
    } | {
        base: string;
        unitsPerGas: string;
        type: 'LightOperation';
    };
    retd: {
        base: string;
        gasPerUnit: string;
        type: 'HeavyOperation';
    } | {
        base: string;
        unitsPerGas: string;
        type: 'LightOperation';
    };
    s256: {
        base: string;
        gasPerUnit: string;
        type: 'HeavyOperation';
    } | {
        base: string;
        unitsPerGas: string;
        type: 'LightOperation';
    };
    scwq: {
        base: string;
        gasPerUnit: string;
        type: 'HeavyOperation';
    } | {
        base: string;
        unitsPerGas: string;
        type: 'LightOperation';
    };
    smo: {
        base: string;
        gasPerUnit: string;
        type: 'HeavyOperation';
    } | {
        base: string;
        unitsPerGas: string;
        type: 'LightOperation';
    };
    srwq: {
        base: string;
        gasPerUnit: string;
        type: 'HeavyOperation';
    } | {
        base: string;
        unitsPerGas: string;
        type: 'LightOperation';
    };
    swwq: {
        base: string;
        gasPerUnit: string;
        type: 'HeavyOperation';
    } | {
        base: string;
        unitsPerGas: string;
        type: 'LightOperation';
    };
    contractRoot: {
        base: string;
        gasPerUnit: string;
        type: 'HeavyOperation';
    } | {
        base: string;
        unitsPerGas: string;
        type: 'LightOperation';
    };
    stateRoot: {
        base: string;
        gasPerUnit: string;
        type: 'HeavyOperation';
    } | {
        base: string;
        unitsPerGas: string;
        type: 'LightOperation';
    };
    vmInitialization: {
        base: string;
        gasPerUnit: string;
        type: 'HeavyOperation';
    } | {
        base: string;
        unitsPerGas: string;
        type: 'LightOperation';
    };
};
export type GqlConsensusParametersFragment = {
    version: GqlConsensusParametersVersion;
    baseAssetId: string;
    chainId: string;
    txParams: {
        version: GqlTxParametersVersion;
        maxInputs: string;
        maxOutputs: string;
        maxWitnesses: string;
        maxGasPerTx: string;
        maxSize: string;
        maxBytecodeSubsections: string;
    };
    predicateParams: {
        version: GqlPredicateParametersVersion;
        maxPredicateLength: string;
        maxPredicateDataLength: string;
        maxGasPerPredicate: string;
        maxMessageDataLength: string;
    };
    scriptParams: {
        version: GqlScriptParametersVersion;
        maxScriptLength: string;
        maxScriptDataLength: string;
    };
    contractParams: {
        version: GqlContractParametersVersion;
        contractMaxSize: string;
        maxStorageSlots: string;
    };
    feeParams: {
        version: GqlFeeParametersVersion;
        gasPriceFactor: string;
        gasPerByte: string;
    };
    gasCosts: {
        version: GqlGasCostsVersion;
        add: string;
        addi: string;
        aloc: string;
        and: string;
        andi: string;
        bal: string;
        bhei: string;
        bhsh: string;
        burn: string;
        cb: string;
        cfei: string;
        cfsi: string;
        div: string;
        divi: string;
        ecr1: string;
        eck1: string;
        ed19: string;
        eq: string;
        exp: string;
        expi: string;
        flag: string;
        gm: string;
        gt: string;
        gtf: string;
        ji: string;
        jmp: string;
        jne: string;
        jnei: string;
        jnzi: string;
        jmpf: string;
        jmpb: string;
        jnzf: string;
        jnzb: string;
        jnef: string;
        jneb: string;
        lb: string;
        log: string;
        lt: string;
        lw: string;
        mint: string;
        mlog: string;
        modOp: string;
        modi: string;
        moveOp: string;
        movi: string;
        mroo: string;
        mul: string;
        muli: string;
        mldv: string;
        noop: string;
        not: string;
        or: string;
        ori: string;
        poph: string;
        popl: string;
        pshh: string;
        pshl: string;
        ret: string;
        rvrt: string;
        sb: string;
        sll: string;
        slli: string;
        srl: string;
        srli: string;
        srw: string;
        sub: string;
        subi: string;
        sw: string;
        sww: string;
        time: string;
        tr: string;
        tro: string;
        wdcm: string;
        wqcm: string;
        wdop: string;
        wqop: string;
        wdml: string;
        wqml: string;
        wddv: string;
        wqdv: string;
        wdmd: string;
        wqmd: string;
        wdam: string;
        wqam: string;
        wdmm: string;
        wqmm: string;
        xor: string;
        xori: string;
        newStoragePerByte: string;
        call: {
            base: string;
            gasPerUnit: string;
            type: 'HeavyOperation';
        } | {
            base: string;
            unitsPerGas: string;
            type: 'LightOperation';
        };
        ccp: {
            base: string;
            gasPerUnit: string;
            type: 'HeavyOperation';
        } | {
            base: string;
            unitsPerGas: string;
            type: 'LightOperation';
        };
        croo: {
            base: string;
            gasPerUnit: string;
            type: 'HeavyOperation';
        } | {
            base: string;
            unitsPerGas: string;
            type: 'LightOperation';
        };
        csiz: {
            base: string;
            gasPerUnit: string;
            type: 'HeavyOperation';
        } | {
            base: string;
            unitsPerGas: string;
            type: 'LightOperation';
        };
        k256: {
            base: string;
            gasPerUnit: string;
            type: 'HeavyOperation';
        } | {
            base: string;
            unitsPerGas: string;
            type: 'LightOperation';
        };
        ldc: {
            base: string;
            gasPerUnit: string;
            type: 'HeavyOperation';
        } | {
            base: string;
            unitsPerGas: string;
            type: 'LightOperation';
        };
        logd: {
            base: string;
            gasPerUnit: string;
            type: 'HeavyOperation';
        } | {
            base: string;
            unitsPerGas: string;
            type: 'LightOperation';
        };
        mcl: {
            base: string;
            gasPerUnit: string;
            type: 'HeavyOperation';
        } | {
            base: string;
            unitsPerGas: string;
            type: 'LightOperation';
        };
        mcli: {
            base: string;
            gasPerUnit: string;
            type: 'HeavyOperation';
        } | {
            base: string;
            unitsPerGas: string;
            type: 'LightOperation';
        };
        mcp: {
            base: string;
            gasPerUnit: string;
            type: 'HeavyOperation';
        } | {
            base: string;
            unitsPerGas: string;
            type: 'LightOperation';
        };
        mcpi: {
            base: string;
            gasPerUnit: string;
            type: 'HeavyOperation';
        } | {
            base: string;
            unitsPerGas: string;
            type: 'LightOperation';
        };
        meq: {
            base: string;
            gasPerUnit: string;
            type: 'HeavyOperation';
        } | {
            base: string;
            unitsPerGas: string;
            type: 'LightOperation';
        };
        retd: {
            base: string;
            gasPerUnit: string;
            type: 'HeavyOperation';
        } | {
            base: string;
            unitsPerGas: string;
            type: 'LightOperation';
        };
        s256: {
            base: string;
            gasPerUnit: string;
            type: 'HeavyOperation';
        } | {
            base: string;
            unitsPerGas: string;
            type: 'LightOperation';
        };
        scwq: {
            base: string;
            gasPerUnit: string;
            type: 'HeavyOperation';
        } | {
            base: string;
            unitsPerGas: string;
            type: 'LightOperation';
        };
        smo: {
            base: string;
            gasPerUnit: string;
            type: 'HeavyOperation';
        } | {
            base: string;
            unitsPerGas: string;
            type: 'LightOperation';
        };
        srwq: {
            base: string;
            gasPerUnit: string;
            type: 'HeavyOperation';
        } | {
            base: string;
            unitsPerGas: string;
            type: 'LightOperation';
        };
        swwq: {
            base: string;
            gasPerUnit: string;
            type: 'HeavyOperation';
        } | {
            base: string;
            unitsPerGas: string;
            type: 'LightOperation';
        };
        contractRoot: {
            base: string;
            gasPerUnit: string;
            type: 'HeavyOperation';
        } | {
            base: string;
            unitsPerGas: string;
            type: 'LightOperation';
        };
        stateRoot: {
            base: string;
            gasPerUnit: string;
            type: 'HeavyOperation';
        } | {
            base: string;
            unitsPerGas: string;
            type: 'LightOperation';
        };
        vmInitialization: {
            base: string;
            gasPerUnit: string;
            type: 'HeavyOperation';
        } | {
            base: string;
            unitsPerGas: string;
            type: 'LightOperation';
        };
    };
};
export type GqlChainInfoFragment = {
    name: string;
    daHeight: string;
    latestBlock: {
        id: string;
        height: string;
        header: {
            time: string;
        };
        transactions: Array<{
            id: string;
        }>;
    };
    consensusParameters: {
        version: GqlConsensusParametersVersion;
        baseAssetId: string;
        chainId: string;
        txParams: {
            version: GqlTxParametersVersion;
            maxInputs: string;
            maxOutputs: string;
            maxWitnesses: string;
            maxGasPerTx: string;
            maxSize: string;
            maxBytecodeSubsections: string;
        };
        predicateParams: {
            version: GqlPredicateParametersVersion;
            maxPredicateLength: string;
            maxPredicateDataLength: string;
            maxGasPerPredicate: string;
            maxMessageDataLength: string;
        };
        scriptParams: {
            version: GqlScriptParametersVersion;
            maxScriptLength: string;
            maxScriptDataLength: string;
        };
        contractParams: {
            version: GqlContractParametersVersion;
            contractMaxSize: string;
            maxStorageSlots: string;
        };
        feeParams: {
            version: GqlFeeParametersVersion;
            gasPriceFactor: string;
            gasPerByte: string;
        };
        gasCosts: {
            version: GqlGasCostsVersion;
            add: string;
            addi: string;
            aloc: string;
            and: string;
            andi: string;
            bal: string;
            bhei: string;
            bhsh: string;
            burn: string;
            cb: string;
            cfei: string;
            cfsi: string;
            div: string;
            divi: string;
            ecr1: string;
            eck1: string;
            ed19: string;
            eq: string;
            exp: string;
            expi: string;
            flag: string;
            gm: string;
            gt: string;
            gtf: string;
            ji: string;
            jmp: string;
            jne: string;
            jnei: string;
            jnzi: string;
            jmpf: string;
            jmpb: string;
            jnzf: string;
            jnzb: string;
            jnef: string;
            jneb: string;
            lb: string;
            log: string;
            lt: string;
            lw: string;
            mint: string;
            mlog: string;
            modOp: string;
            modi: string;
            moveOp: string;
            movi: string;
            mroo: string;
            mul: string;
            muli: string;
            mldv: string;
            noop: string;
            not: string;
            or: string;
            ori: string;
            poph: string;
            popl: string;
            pshh: string;
            pshl: string;
            ret: string;
            rvrt: string;
            sb: string;
            sll: string;
            slli: string;
            srl: string;
            srli: string;
            srw: string;
            sub: string;
            subi: string;
            sw: string;
            sww: string;
            time: string;
            tr: string;
            tro: string;
            wdcm: string;
            wqcm: string;
            wdop: string;
            wqop: string;
            wdml: string;
            wqml: string;
            wddv: string;
            wqdv: string;
            wdmd: string;
            wqmd: string;
            wdam: string;
            wqam: string;
            wdmm: string;
            wqmm: string;
            xor: string;
            xori: string;
            newStoragePerByte: string;
            call: {
                base: string;
                gasPerUnit: string;
                type: 'HeavyOperation';
            } | {
                base: string;
                unitsPerGas: string;
                type: 'LightOperation';
            };
            ccp: {
                base: string;
                gasPerUnit: string;
                type: 'HeavyOperation';
            } | {
                base: string;
                unitsPerGas: string;
                type: 'LightOperation';
            };
            croo: {
                base: string;
                gasPerUnit: string;
                type: 'HeavyOperation';
            } | {
                base: string;
                unitsPerGas: string;
                type: 'LightOperation';
            };
            csiz: {
                base: string;
                gasPerUnit: string;
                type: 'HeavyOperation';
            } | {
                base: string;
                unitsPerGas: string;
                type: 'LightOperation';
            };
            k256: {
                base: string;
                gasPerUnit: string;
                type: 'HeavyOperation';
            } | {
                base: string;
                unitsPerGas: string;
                type: 'LightOperation';
            };
            ldc: {
                base: string;
                gasPerUnit: string;
                type: 'HeavyOperation';
            } | {
                base: string;
                unitsPerGas: string;
                type: 'LightOperation';
            };
            logd: {
                base: string;
                gasPerUnit: string;
                type: 'HeavyOperation';
            } | {
                base: string;
                unitsPerGas: string;
                type: 'LightOperation';
            };
            mcl: {
                base: string;
                gasPerUnit: string;
                type: 'HeavyOperation';
            } | {
                base: string;
                unitsPerGas: string;
                type: 'LightOperation';
            };
            mcli: {
                base: string;
                gasPerUnit: string;
                type: 'HeavyOperation';
            } | {
                base: string;
                unitsPerGas: string;
                type: 'LightOperation';
            };
            mcp: {
                base: string;
                gasPerUnit: string;
                type: 'HeavyOperation';
            } | {
                base: string;
                unitsPerGas: string;
                type: 'LightOperation';
            };
            mcpi: {
                base: string;
                gasPerUnit: string;
                type: 'HeavyOperation';
            } | {
                base: string;
                unitsPerGas: string;
                type: 'LightOperation';
            };
            meq: {
                base: string;
                gasPerUnit: string;
                type: 'HeavyOperation';
            } | {
                base: string;
                unitsPerGas: string;
                type: 'LightOperation';
            };
            retd: {
                base: string;
                gasPerUnit: string;
                type: 'HeavyOperation';
            } | {
                base: string;
                unitsPerGas: string;
                type: 'LightOperation';
            };
            s256: {
                base: string;
                gasPerUnit: string;
                type: 'HeavyOperation';
            } | {
                base: string;
                unitsPerGas: string;
                type: 'LightOperation';
            };
            scwq: {
                base: string;
                gasPerUnit: string;
                type: 'HeavyOperation';
            } | {
                base: string;
                unitsPerGas: string;
                type: 'LightOperation';
            };
            smo: {
                base: string;
                gasPerUnit: string;
                type: 'HeavyOperation';
            } | {
                base: string;
                unitsPerGas: string;
                type: 'LightOperation';
            };
            srwq: {
                base: string;
                gasPerUnit: string;
                type: 'HeavyOperation';
            } | {
                base: string;
                unitsPerGas: string;
                type: 'LightOperation';
            };
            swwq: {
                base: string;
                gasPerUnit: string;
                type: 'HeavyOperation';
            } | {
                base: string;
                unitsPerGas: string;
                type: 'LightOperation';
            };
            contractRoot: {
                base: string;
                gasPerUnit: string;
                type: 'HeavyOperation';
            } | {
                base: string;
                unitsPerGas: string;
                type: 'LightOperation';
            };
            stateRoot: {
                base: string;
                gasPerUnit: string;
                type: 'HeavyOperation';
            } | {
                base: string;
                unitsPerGas: string;
                type: 'LightOperation';
            };
            vmInitialization: {
                base: string;
                gasPerUnit: string;
                type: 'HeavyOperation';
            } | {
                base: string;
                unitsPerGas: string;
                type: 'LightOperation';
            };
        };
    };
};
export type GqlContractBalanceFragment = {
    contract: string;
    amount: string;
    assetId: string;
};
export type GqlPageInfoFragment = {
    hasPreviousPage: boolean;
    hasNextPage: boolean;
    startCursor?: string | null;
    endCursor?: string | null;
};
export type GqlGetVersionQueryVariables = Exact<{
    [key: string]: never;
}>;
export type GqlGetVersionQuery = {
    nodeInfo: {
        nodeVersion: string;
    };
};
export type GqlNodeInfoFragment = {
    utxoValidation: boolean;
    vmBacktrace: boolean;
    maxTx: string;
    maxDepth: string;
    nodeVersion: string;
};
export type GqlRelayedTransactionStatusFragment = {
    blockHeight: string;
    failure: string;
};
export type GqlGetNodeInfoQueryVariables = Exact<{
    [key: string]: never;
}>;
export type GqlGetNodeInfoQuery = {
    nodeInfo: {
        utxoValidation: boolean;
        vmBacktrace: boolean;
        maxTx: string;
        maxDepth: string;
        nodeVersion: string;
    };
};
export type GqlGetChainQueryVariables = Exact<{
    [key: string]: never;
}>;
export type GqlGetChainQuery = {
    chain: {
        name: string;
        daHeight: string;
        latestBlock: {
            id: string;
            height: string;
            header: {
                time: string;
            };
            transactions: Array<{
                id: string;
            }>;
        };
        consensusParameters: {
            version: GqlConsensusParametersVersion;
            baseAssetId: string;
            chainId: string;
            txParams: {
                version: GqlTxParametersVersion;
                maxInputs: string;
                maxOutputs: string;
                maxWitnesses: string;
                maxGasPerTx: string;
                maxSize: string;
                maxBytecodeSubsections: string;
            };
            predicateParams: {
                version: GqlPredicateParametersVersion;
                maxPredicateLength: string;
                maxPredicateDataLength: string;
                maxGasPerPredicate: string;
                maxMessageDataLength: string;
            };
            scriptParams: {
                version: GqlScriptParametersVersion;
                maxScriptLength: string;
                maxScriptDataLength: string;
            };
            contractParams: {
                version: GqlContractParametersVersion;
                contractMaxSize: string;
                maxStorageSlots: string;
            };
            feeParams: {
                version: GqlFeeParametersVersion;
                gasPriceFactor: string;
                gasPerByte: string;
            };
            gasCosts: {
                version: GqlGasCostsVersion;
                add: string;
                addi: string;
                aloc: string;
                and: string;
                andi: string;
                bal: string;
                bhei: string;
                bhsh: string;
                burn: string;
                cb: string;
                cfei: string;
                cfsi: string;
                div: string;
                divi: string;
                ecr1: string;
                eck1: string;
                ed19: string;
                eq: string;
                exp: string;
                expi: string;
                flag: string;
                gm: string;
                gt: string;
                gtf: string;
                ji: string;
                jmp: string;
                jne: string;
                jnei: string;
                jnzi: string;
                jmpf: string;
                jmpb: string;
                jnzf: string;
                jnzb: string;
                jnef: string;
                jneb: string;
                lb: string;
                log: string;
                lt: string;
                lw: string;
                mint: string;
                mlog: string;
                modOp: string;
                modi: string;
                moveOp: string;
                movi: string;
                mroo: string;
                mul: string;
                muli: string;
                mldv: string;
                noop: string;
                not: string;
                or: string;
                ori: string;
                poph: string;
                popl: string;
                pshh: string;
                pshl: string;
                ret: string;
                rvrt: string;
                sb: string;
                sll: string;
                slli: string;
                srl: string;
                srli: string;
                srw: string;
                sub: string;
                subi: string;
                sw: string;
                sww: string;
                time: string;
                tr: string;
                tro: string;
                wdcm: string;
                wqcm: string;
                wdop: string;
                wqop: string;
                wdml: string;
                wqml: string;
                wddv: string;
                wqdv: string;
                wdmd: string;
                wqmd: string;
                wdam: string;
                wqam: string;
                wdmm: string;
                wqmm: string;
                xor: string;
                xori: string;
                newStoragePerByte: string;
                call: {
                    base: string;
                    gasPerUnit: string;
                    type: 'HeavyOperation';
                } | {
                    base: string;
                    unitsPerGas: string;
                    type: 'LightOperation';
                };
                ccp: {
                    base: string;
                    gasPerUnit: string;
                    type: 'HeavyOperation';
                } | {
                    base: string;
                    unitsPerGas: string;
                    type: 'LightOperation';
                };
                croo: {
                    base: string;
                    gasPerUnit: string;
                    type: 'HeavyOperation';
                } | {
                    base: string;
                    unitsPerGas: string;
                    type: 'LightOperation';
                };
                csiz: {
                    base: string;
                    gasPerUnit: string;
                    type: 'HeavyOperation';
                } | {
                    base: string;
                    unitsPerGas: string;
                    type: 'LightOperation';
                };
                k256: {
                    base: string;
                    gasPerUnit: string;
                    type: 'HeavyOperation';
                } | {
                    base: string;
                    unitsPerGas: string;
                    type: 'LightOperation';
                };
                ldc: {
                    base: string;
                    gasPerUnit: string;
                    type: 'HeavyOperation';
                } | {
                    base: string;
                    unitsPerGas: string;
                    type: 'LightOperation';
                };
                logd: {
                    base: string;
                    gasPerUnit: string;
                    type: 'HeavyOperation';
                } | {
                    base: string;
                    unitsPerGas: string;
                    type: 'LightOperation';
                };
                mcl: {
                    base: string;
                    gasPerUnit: string;
                    type: 'HeavyOperation';
                } | {
                    base: string;
                    unitsPerGas: string;
                    type: 'LightOperation';
                };
                mcli: {
                    base: string;
                    gasPerUnit: string;
                    type: 'HeavyOperation';
                } | {
                    base: string;
                    unitsPerGas: string;
                    type: 'LightOperation';
                };
                mcp: {
                    base: string;
                    gasPerUnit: string;
                    type: 'HeavyOperation';
                } | {
                    base: string;
                    unitsPerGas: string;
                    type: 'LightOperation';
                };
                mcpi: {
                    base: string;
                    gasPerUnit: string;
                    type: 'HeavyOperation';
                } | {
                    base: string;
                    unitsPerGas: string;
                    type: 'LightOperation';
                };
                meq: {
                    base: string;
                    gasPerUnit: string;
                    type: 'HeavyOperation';
                } | {
                    base: string;
                    unitsPerGas: string;
                    type: 'LightOperation';
                };
                retd: {
                    base: string;
                    gasPerUnit: string;
                    type: 'HeavyOperation';
                } | {
                    base: string;
                    unitsPerGas: string;
                    type: 'LightOperation';
                };
                s256: {
                    base: string;
                    gasPerUnit: string;
                    type: 'HeavyOperation';
                } | {
                    base: string;
                    unitsPerGas: string;
                    type: 'LightOperation';
                };
                scwq: {
                    base: string;
                    gasPerUnit: string;
                    type: 'HeavyOperation';
                } | {
                    base: string;
                    unitsPerGas: string;
                    type: 'LightOperation';
                };
                smo: {
                    base: string;
                    gasPerUnit: string;
                    type: 'HeavyOperation';
                } | {
                    base: string;
                    unitsPerGas: string;
                    type: 'LightOperation';
                };
                srwq: {
                    base: string;
                    gasPerUnit: string;
                    type: 'HeavyOperation';
                } | {
                    base: string;
                    unitsPerGas: string;
                    type: 'LightOperation';
                };
                swwq: {
                    base: string;
                    gasPerUnit: string;
                    type: 'HeavyOperation';
                } | {
                    base: string;
                    unitsPerGas: string;
                    type: 'LightOperation';
                };
                contractRoot: {
                    base: string;
                    gasPerUnit: string;
                    type: 'HeavyOperation';
                } | {
                    base: string;
                    unitsPerGas: string;
                    type: 'LightOperation';
                };
                stateRoot: {
                    base: string;
                    gasPerUnit: string;
                    type: 'HeavyOperation';
                } | {
                    base: string;
                    unitsPerGas: string;
                    type: 'LightOperation';
                };
                vmInitialization: {
                    base: string;
                    gasPerUnit: string;
                    type: 'HeavyOperation';
                } | {
                    base: string;
                    unitsPerGas: string;
                    type: 'LightOperation';
                };
            };
        };
    };
};
export type GqlGetTransactionQueryVariables = Exact<{
    transactionId: Scalars['TransactionId'];
}>;
export type GqlGetTransactionQuery = {
    transaction?: {
        id: string;
        rawPayload: string;
        status?: {
            totalGas: string;
            totalFee: string;
            time: string;
            reason: string;
            type: 'FailureStatus';
            block: {
                id: string;
            };
            receipts: Array<{
                id?: string | null;
                pc?: string | null;
                is?: string | null;
                to?: string | null;
                toAddress?: string | null;
                amount?: string | null;
                assetId?: string | null;
                gas?: string | null;
                param1?: string | null;
                param2?: string | null;
                val?: string | null;
                ptr?: string | null;
                digest?: string | null;
                reason?: string | null;
                ra?: string | null;
                rb?: string | null;
                rc?: string | null;
                rd?: string | null;
                len?: string | null;
                receiptType: GqlReceiptType;
                result?: string | null;
                gasUsed?: string | null;
                data?: string | null;
                sender?: string | null;
                recipient?: string | null;
                nonce?: string | null;
                contractId?: string | null;
                subId?: string | null;
            }>;
        } | {
            reason: string;
            type: 'SqueezedOutStatus';
        } | {
            time: string;
            type: 'SubmittedStatus';
        } | {
            time: string;
            totalGas: string;
            totalFee: string;
            type: 'SuccessStatus';
            block: {
                id: string;
            };
            programState?: {
                returnType: GqlReturnType;
                data: string;
            } | null;
            receipts: Array<{
                id?: string | null;
                pc?: string | null;
                is?: string | null;
                to?: string | null;
                toAddress?: string | null;
                amount?: string | null;
                assetId?: string | null;
                gas?: string | null;
                param1?: string | null;
                param2?: string | null;
                val?: string | null;
                ptr?: string | null;
                digest?: string | null;
                reason?: string | null;
                ra?: string | null;
                rb?: string | null;
                rc?: string | null;
                rd?: string | null;
                len?: string | null;
                receiptType: GqlReceiptType;
                result?: string | null;
                gasUsed?: string | null;
                data?: string | null;
                sender?: string | null;
                recipient?: string | null;
                nonce?: string | null;
                contractId?: string | null;
                subId?: string | null;
            }>;
        } | null;
    } | null;
};
export type GqlGetTransactionWithReceiptsQueryVariables = Exact<{
    transactionId: Scalars['TransactionId'];
}>;
export type GqlGetTransactionWithReceiptsQuery = {
    transaction?: {
        id: string;
        rawPayload: string;
        status?: {
            totalGas: string;
            totalFee: string;
            time: string;
            reason: string;
            type: 'FailureStatus';
            block: {
                id: string;
            };
            receipts: Array<{
                id?: string | null;
                pc?: string | null;
                is?: string | null;
                to?: string | null;
                toAddress?: string | null;
                amount?: string | null;
                assetId?: string | null;
                gas?: string | null;
                param1?: string | null;
                param2?: string | null;
                val?: string | null;
                ptr?: string | null;
                digest?: string | null;
                reason?: string | null;
                ra?: string | null;
                rb?: string | null;
                rc?: string | null;
                rd?: string | null;
                len?: string | null;
                receiptType: GqlReceiptType;
                result?: string | null;
                gasUsed?: string | null;
                data?: string | null;
                sender?: string | null;
                recipient?: string | null;
                nonce?: string | null;
                contractId?: string | null;
                subId?: string | null;
            }>;
        } | {
            reason: string;
            type: 'SqueezedOutStatus';
        } | {
            time: string;
            type: 'SubmittedStatus';
        } | {
            time: string;
            totalGas: string;
            totalFee: string;
            type: 'SuccessStatus';
            block: {
                id: string;
            };
            programState?: {
                returnType: GqlReturnType;
                data: string;
            } | null;
            receipts: Array<{
                id?: string | null;
                pc?: string | null;
                is?: string | null;
                to?: string | null;
                toAddress?: string | null;
                amount?: string | null;
                assetId?: string | null;
                gas?: string | null;
                param1?: string | null;
                param2?: string | null;
                val?: string | null;
                ptr?: string | null;
                digest?: string | null;
                reason?: string | null;
                ra?: string | null;
                rb?: string | null;
                rc?: string | null;
                rd?: string | null;
                len?: string | null;
                receiptType: GqlReceiptType;
                result?: string | null;
                gasUsed?: string | null;
                data?: string | null;
                sender?: string | null;
                recipient?: string | null;
                nonce?: string | null;
                contractId?: string | null;
                subId?: string | null;
            }>;
        } | null;
    } | null;
};
export type GqlGetTransactionsQueryVariables = Exact<{
    after?: InputMaybe<Scalars['String']>;
    before?: InputMaybe<Scalars['String']>;
    first?: InputMaybe<Scalars['Int']>;
    last?: InputMaybe<Scalars['Int']>;
}>;
export type GqlGetTransactionsQuery = {
    transactions: {
        edges: Array<{
            node: {
                id: string;
                rawPayload: string;
                status?: {
                    totalGas: string;
                    totalFee: string;
                    time: string;
                    reason: string;
                    type: 'FailureStatus';
                    block: {
                        id: string;
                    };
                    receipts: Array<{
                        id?: string | null;
                        pc?: string | null;
                        is?: string | null;
                        to?: string | null;
                        toAddress?: string | null;
                        amount?: string | null;
                        assetId?: string | null;
                        gas?: string | null;
                        param1?: string | null;
                        param2?: string | null;
                        val?: string | null;
                        ptr?: string | null;
                        digest?: string | null;
                        reason?: string | null;
                        ra?: string | null;
                        rb?: string | null;
                        rc?: string | null;
                        rd?: string | null;
                        len?: string | null;
                        receiptType: GqlReceiptType;
                        result?: string | null;
                        gasUsed?: string | null;
                        data?: string | null;
                        sender?: string | null;
                        recipient?: string | null;
                        nonce?: string | null;
                        contractId?: string | null;
                        subId?: string | null;
                    }>;
                } | {
                    reason: string;
                    type: 'SqueezedOutStatus';
                } | {
                    time: string;
                    type: 'SubmittedStatus';
                } | {
                    time: string;
                    totalGas: string;
                    totalFee: string;
                    type: 'SuccessStatus';
                    block: {
                        id: string;
                    };
                    programState?: {
                        returnType: GqlReturnType;
                        data: string;
                    } | null;
                    receipts: Array<{
                        id?: string | null;
                        pc?: string | null;
                        is?: string | null;
                        to?: string | null;
                        toAddress?: string | null;
                        amount?: string | null;
                        assetId?: string | null;
                        gas?: string | null;
                        param1?: string | null;
                        param2?: string | null;
                        val?: string | null;
                        ptr?: string | null;
                        digest?: string | null;
                        reason?: string | null;
                        ra?: string | null;
                        rb?: string | null;
                        rc?: string | null;
                        rd?: string | null;
                        len?: string | null;
                        receiptType: GqlReceiptType;
                        result?: string | null;
                        gasUsed?: string | null;
                        data?: string | null;
                        sender?: string | null;
                        recipient?: string | null;
                        nonce?: string | null;
                        contractId?: string | null;
                        subId?: string | null;
                    }>;
                } | null;
            };
        }>;
    };
};
export type GqlGetTransactionsByOwnerQueryVariables = Exact<{
    owner: Scalars['Address'];
    after?: InputMaybe<Scalars['String']>;
    before?: InputMaybe<Scalars['String']>;
    first?: InputMaybe<Scalars['Int']>;
    last?: InputMaybe<Scalars['Int']>;
}>;
export type GqlGetTransactionsByOwnerQuery = {
    transactionsByOwner: {
        pageInfo: {
            hasPreviousPage: boolean;
            hasNextPage: boolean;
            startCursor?: string | null;
            endCursor?: string | null;
        };
        edges: Array<{
            node: {
                id: string;
                rawPayload: string;
                status?: {
                    totalGas: string;
                    totalFee: string;
                    time: string;
                    reason: string;
                    type: 'FailureStatus';
                    block: {
                        id: string;
                    };
                    receipts: Array<{
                        id?: string | null;
                        pc?: string | null;
                        is?: string | null;
                        to?: string | null;
                        toAddress?: string | null;
                        amount?: string | null;
                        assetId?: string | null;
                        gas?: string | null;
                        param1?: string | null;
                        param2?: string | null;
                        val?: string | null;
                        ptr?: string | null;
                        digest?: string | null;
                        reason?: string | null;
                        ra?: string | null;
                        rb?: string | null;
                        rc?: string | null;
                        rd?: string | null;
                        len?: string | null;
                        receiptType: GqlReceiptType;
                        result?: string | null;
                        gasUsed?: string | null;
                        data?: string | null;
                        sender?: string | null;
                        recipient?: string | null;
                        nonce?: string | null;
                        contractId?: string | null;
                        subId?: string | null;
                    }>;
                } | {
                    reason: string;
                    type: 'SqueezedOutStatus';
                } | {
                    time: string;
                    type: 'SubmittedStatus';
                } | {
                    time: string;
                    totalGas: string;
                    totalFee: string;
                    type: 'SuccessStatus';
                    block: {
                        id: string;
                    };
                    programState?: {
                        returnType: GqlReturnType;
                        data: string;
                    } | null;
                    receipts: Array<{
                        id?: string | null;
                        pc?: string | null;
                        is?: string | null;
                        to?: string | null;
                        toAddress?: string | null;
                        amount?: string | null;
                        assetId?: string | null;
                        gas?: string | null;
                        param1?: string | null;
                        param2?: string | null;
                        val?: string | null;
                        ptr?: string | null;
                        digest?: string | null;
                        reason?: string | null;
                        ra?: string | null;
                        rb?: string | null;
                        rc?: string | null;
                        rd?: string | null;
                        len?: string | null;
                        receiptType: GqlReceiptType;
                        result?: string | null;
                        gasUsed?: string | null;
                        data?: string | null;
                        sender?: string | null;
                        recipient?: string | null;
                        nonce?: string | null;
                        contractId?: string | null;
                        subId?: string | null;
                    }>;
                } | null;
            };
        }>;
    };
};
export type GqlEstimatePredicatesQueryVariables = Exact<{
    encodedTransaction: Scalars['HexString'];
}>;
export type GqlEstimatePredicatesQuery = {
    estimatePredicates: {
        inputs?: Array<{
            predicateGasUsed: string;
        } | {
            predicateGasUsed: string;
        } | {}> | null;
    };
};
export type GqlGetBlockQueryVariables = Exact<{
    blockId?: InputMaybe<Scalars['BlockId']>;
    height?: InputMaybe<Scalars['U32']>;
}>;
export type GqlGetBlockQuery = {
    block?: {
        id: string;
        height: string;
        header: {
            time: string;
        };
        transactions: Array<{
            id: string;
        }>;
    } | null;
};
export type GqlGetBlockWithTransactionsQueryVariables = Exact<{
    blockId?: InputMaybe<Scalars['BlockId']>;
    blockHeight?: InputMaybe<Scalars['U32']>;
}>;
export type GqlGetBlockWithTransactionsQuery = {
    block?: {
        id: string;
        height: string;
        transactions: Array<{
            id: string;
            rawPayload: string;
            status?: {
                totalGas: string;
                totalFee: string;
                time: string;
                reason: string;
                type: 'FailureStatus';
                block: {
                    id: string;
                };
                receipts: Array<{
                    id?: string | null;
                    pc?: string | null;
                    is?: string | null;
                    to?: string | null;
                    toAddress?: string | null;
                    amount?: string | null;
                    assetId?: string | null;
                    gas?: string | null;
                    param1?: string | null;
                    param2?: string | null;
                    val?: string | null;
                    ptr?: string | null;
                    digest?: string | null;
                    reason?: string | null;
                    ra?: string | null;
                    rb?: string | null;
                    rc?: string | null;
                    rd?: string | null;
                    len?: string | null;
                    receiptType: GqlReceiptType;
                    result?: string | null;
                    gasUsed?: string | null;
                    data?: string | null;
                    sender?: string | null;
                    recipient?: string | null;
                    nonce?: string | null;
                    contractId?: string | null;
                    subId?: string | null;
                }>;
            } | {
                reason: string;
                type: 'SqueezedOutStatus';
            } | {
                time: string;
                type: 'SubmittedStatus';
            } | {
                time: string;
                totalGas: string;
                totalFee: string;
                type: 'SuccessStatus';
                block: {
                    id: string;
                };
                programState?: {
                    returnType: GqlReturnType;
                    data: string;
                } | null;
                receipts: Array<{
                    id?: string | null;
                    pc?: string | null;
                    is?: string | null;
                    to?: string | null;
                    toAddress?: string | null;
                    amount?: string | null;
                    assetId?: string | null;
                    gas?: string | null;
                    param1?: string | null;
                    param2?: string | null;
                    val?: string | null;
                    ptr?: string | null;
                    digest?: string | null;
                    reason?: string | null;
                    ra?: string | null;
                    rb?: string | null;
                    rc?: string | null;
                    rd?: string | null;
                    len?: string | null;
                    receiptType: GqlReceiptType;
                    result?: string | null;
                    gasUsed?: string | null;
                    data?: string | null;
                    sender?: string | null;
                    recipient?: string | null;
                    nonce?: string | null;
                    contractId?: string | null;
                    subId?: string | null;
                }>;
            } | null;
        }>;
        header: {
            time: string;
        };
    } | null;
};
export type GqlGetBlocksQueryVariables = Exact<{
    after?: InputMaybe<Scalars['String']>;
    before?: InputMaybe<Scalars['String']>;
    first?: InputMaybe<Scalars['Int']>;
    last?: InputMaybe<Scalars['Int']>;
}>;
export type GqlGetBlocksQuery = {
    blocks: {
        edges: Array<{
            node: {
                id: string;
                height: string;
                header: {
                    time: string;
                };
                transactions: Array<{
                    id: string;
                }>;
            };
        }>;
    };
};
export type GqlGetCoinQueryVariables = Exact<{
    coinId: Scalars['UtxoId'];
}>;
export type GqlGetCoinQuery = {
    coin?: {
        utxoId: string;
        owner: string;
        amount: string;
        assetId: string;
        blockCreated: string;
        txCreatedIdx: string;
        type: 'Coin';
    } | null;
};
export type GqlGetCoinsQueryVariables = Exact<{
    filter: GqlCoinFilterInput;
    after?: InputMaybe<Scalars['String']>;
    before?: InputMaybe<Scalars['String']>;
    first?: InputMaybe<Scalars['Int']>;
    last?: InputMaybe<Scalars['Int']>;
}>;
export type GqlGetCoinsQuery = {
    coins: {
        edges: Array<{
            node: {
                utxoId: string;
                owner: string;
                amount: string;
                assetId: string;
                blockCreated: string;
                txCreatedIdx: string;
                type: 'Coin';
            };
        }>;
    };
};
export type GqlGetCoinsToSpendQueryVariables = Exact<{
    owner: Scalars['Address'];
    queryPerAsset: Array<GqlSpendQueryElementInput> | GqlSpendQueryElementInput;
    excludedIds?: InputMaybe<GqlExcludeInput>;
}>;
export type GqlGetCoinsToSpendQuery = {
    coinsToSpend: Array<Array<{
        utxoId: string;
        owner: string;
        amount: string;
        assetId: string;
        blockCreated: string;
        txCreatedIdx: string;
        type: 'Coin';
    } | {
        sender: string;
        recipient: string;
        nonce: string;
        amount: string;
        assetId: string;
        daHeight: string;
        type: 'MessageCoin';
    }>>;
};
export type GqlGetContractQueryVariables = Exact<{
    contractId: Scalars['ContractId'];
}>;
export type GqlGetContractQuery = {
    contract?: {
        bytecode: string;
        id: string;
    } | null;
};
export type GqlGetContractBalanceQueryVariables = Exact<{
    contract: Scalars['ContractId'];
    asset: Scalars['AssetId'];
}>;
export type GqlGetContractBalanceQuery = {
    contractBalance: {
        contract: string;
        amount: string;
        assetId: string;
    };
};
export type GqlGetBalanceQueryVariables = Exact<{
    owner: Scalars['Address'];
    assetId: Scalars['AssetId'];
}>;
export type GqlGetBalanceQuery = {
    balance: {
        owner: string;
        amount: string;
        assetId: string;
    };
};
export type GqlGetLatestGasPriceQueryVariables = Exact<{
    [key: string]: never;
}>;
export type GqlGetLatestGasPriceQuery = {
    latestGasPrice: {
        gasPrice: string;
    };
};
export type GqlEstimateGasPriceQueryVariables = Exact<{
    blockHorizon: Scalars['U32'];
}>;
export type GqlEstimateGasPriceQuery = {
    estimateGasPrice: {
        gasPrice: string;
    };
};
export type GqlGetBalancesQueryVariables = Exact<{
    filter: GqlBalanceFilterInput;
    after?: InputMaybe<Scalars['String']>;
    before?: InputMaybe<Scalars['String']>;
    first?: InputMaybe<Scalars['Int']>;
    last?: InputMaybe<Scalars['Int']>;
}>;
export type GqlGetBalancesQuery = {
    balances: {
        edges: Array<{
            node: {
                owner: string;
                amount: string;
                assetId: string;
            };
        }>;
    };
};
export type GqlGetMessagesQueryVariables = Exact<{
    owner: Scalars['Address'];
    after?: InputMaybe<Scalars['String']>;
    before?: InputMaybe<Scalars['String']>;
    first?: InputMaybe<Scalars['Int']>;
    last?: InputMaybe<Scalars['Int']>;
}>;
export type GqlGetMessagesQuery = {
    messages: {
        edges: Array<{
            node: {
                amount: string;
                sender: string;
                recipient: string;
                data: string;
                nonce: string;
                daHeight: string;
            };
        }>;
    };
};
export type GqlGetMessageProofQueryVariables = Exact<{
    transactionId: Scalars['TransactionId'];
    nonce: Scalars['Nonce'];
    commitBlockId?: InputMaybe<Scalars['BlockId']>;
    commitBlockHeight?: InputMaybe<Scalars['U32']>;
}>;
export type GqlGetMessageProofQuery = {
    messageProof?: {
        sender: string;
        recipient: string;
        nonce: string;
        amount: string;
        data: string;
        messageProof: {
            proofSet: Array<string>;
            proofIndex: string;
        };
        blockProof: {
            proofSet: Array<string>;
            proofIndex: string;
        };
        messageBlockHeader: {
            id: string;
            daHeight: string;
            consensusParametersVersion: string;
            stateTransitionBytecodeVersion: string;
            transactionsCount: string;
            messageReceiptCount: string;
            transactionsRoot: string;
            messageOutboxRoot: string;
            eventInboxRoot: string;
            height: string;
            prevRoot: string;
            time: string;
            applicationHash: string;
        };
        commitBlockHeader: {
            id: string;
            daHeight: string;
            consensusParametersVersion: string;
            stateTransitionBytecodeVersion: string;
            transactionsCount: string;
            messageReceiptCount: string;
            transactionsRoot: string;
            messageOutboxRoot: string;
            eventInboxRoot: string;
            height: string;
            prevRoot: string;
            time: string;
            applicationHash: string;
        };
    } | null;
};
export type GqlGetMessageStatusQueryVariables = Exact<{
    nonce: Scalars['Nonce'];
}>;
export type GqlGetMessageStatusQuery = {
    messageStatus: {
        state: GqlMessageState;
    };
};
export type GqlGetRelayedTransactionStatusQueryVariables = Exact<{
    relayedTransactionId: Scalars['RelayedTransactionId'];
}>;
export type GqlGetRelayedTransactionStatusQuery = {
    relayedTransactionStatus?: {
        blockHeight: string;
        failure: string;
    } | null;
};
export type GqlDryRunMutationVariables = Exact<{
    encodedTransactions: Array<Scalars['HexString']> | Scalars['HexString'];
    utxoValidation?: InputMaybe<Scalars['Boolean']>;
}>;
export type GqlDryRunMutation = {
    dryRun: Array<{
        id: string;
        status: {
            totalGas: string;
            totalFee: string;
            reason: string;
            type: 'DryRunFailureStatus';
            programState?: {
                returnType: GqlReturnType;
                data: string;
            } | null;
        } | {
            totalGas: string;
            totalFee: string;
            type: 'DryRunSuccessStatus';
            programState?: {
                returnType: GqlReturnType;
                data: string;
            } | null;
        };
        receipts: Array<{
            id?: string | null;
            pc?: string | null;
            is?: string | null;
            to?: string | null;
            toAddress?: string | null;
            amount?: string | null;
            assetId?: string | null;
            gas?: string | null;
            param1?: string | null;
            param2?: string | null;
            val?: string | null;
            ptr?: string | null;
            digest?: string | null;
            reason?: string | null;
            ra?: string | null;
            rb?: string | null;
            rc?: string | null;
            rd?: string | null;
            len?: string | null;
            receiptType: GqlReceiptType;
            result?: string | null;
            gasUsed?: string | null;
            data?: string | null;
            sender?: string | null;
            recipient?: string | null;
            nonce?: string | null;
            contractId?: string | null;
            subId?: string | null;
        }>;
    }>;
};
export type GqlSubmitMutationVariables = Exact<{
    encodedTransaction: Scalars['HexString'];
}>;
export type GqlSubmitMutation = {
    submit: {
        id: string;
    };
};
export type GqlProduceBlocksMutationVariables = Exact<{
    startTimestamp?: InputMaybe<Scalars['Tai64Timestamp']>;
    blocksToProduce: Scalars['U32'];
}>;
export type GqlProduceBlocksMutation = {
    produceBlocks: string;
};
export type GqlGetMessageByNonceQueryVariables = Exact<{
    nonce: Scalars['Nonce'];
}>;
export type GqlGetMessageByNonceQuery = {
    message?: {
        amount: string;
        sender: string;
        recipient: string;
        data: string;
        nonce: string;
        daHeight: string;
    } | null;
};
export type GqlSubmitAndAwaitSubscriptionVariables = Exact<{
    encodedTransaction: Scalars['HexString'];
}>;
export type GqlSubmitAndAwaitSubscription = {
    submitAndAwait: {
        type: 'FailureStatus';
    } | {
        reason: string;
        type: 'SqueezedOutStatus';
    } | {
        type: 'SubmittedStatus';
    } | {
        type: 'SuccessStatus';
    };
};
export type GqlStatusChangeSubscriptionVariables = Exact<{
    transactionId: Scalars['TransactionId'];
}>;
export type GqlStatusChangeSubscription = {
    statusChange: {
        type: 'FailureStatus';
    } | {
        reason: string;
        type: 'SqueezedOutStatus';
    } | {
        type: 'SubmittedStatus';
    } | {
        type: 'SuccessStatus';
    };
};
export declare const TransactionStatusSubscriptionFragmentDoc: DocumentNode;
export declare const SubmittedStatusFragmentDoc: DocumentNode;
export declare const ReceiptFragmentDoc: DocumentNode;
export declare const SuccessStatusFragmentDoc: DocumentNode;
export declare const FailureStatusFragmentDoc: DocumentNode;
export declare const SqueezedOutStatusFragmentDoc: DocumentNode;
export declare const TransactionStatusFragmentDoc: DocumentNode;
export declare const TransactionFragmentDoc: DocumentNode;
export declare const InputEstimatePredicatesFragmentDoc: DocumentNode;
export declare const TransactionEstimatePredicatesFragmentDoc: DocumentNode;
export declare const DryRunFailureStatusFragmentDoc: DocumentNode;
export declare const DryRunSuccessStatusFragmentDoc: DocumentNode;
export declare const DryRunTransactionStatusFragmentDoc: DocumentNode;
export declare const DryRunTransactionExecutionStatusFragmentDoc: DocumentNode;
export declare const CoinFragmentDoc: DocumentNode;
export declare const MessageCoinFragmentDoc: DocumentNode;
export declare const MessageFragmentDoc: DocumentNode;
export declare const MessageProofFragmentDoc: DocumentNode;
export declare const BalanceFragmentDoc: DocumentNode;
export declare const BlockFragmentDoc: DocumentNode;
export declare const TxParametersFragmentDoc: DocumentNode;
export declare const PredicateParametersFragmentDoc: DocumentNode;
export declare const ScriptParametersFragmentDoc: DocumentNode;
export declare const ContractParametersFragmentDoc: DocumentNode;
export declare const FeeParametersFragmentDoc: DocumentNode;
export declare const DependentCostFragmentDoc: DocumentNode;
export declare const GasCostsFragmentDoc: DocumentNode;
export declare const ConsensusParametersFragmentDoc: DocumentNode;
export declare const ChainInfoFragmentDoc: DocumentNode;
export declare const ContractBalanceFragmentDoc: DocumentNode;
export declare const PageInfoFragmentDoc: DocumentNode;
export declare const NodeInfoFragmentDoc: DocumentNode;
export declare const RelayedTransactionStatusFragmentDoc: DocumentNode;
export declare const GetVersionDocument: DocumentNode;
export declare const GetNodeInfoDocument: DocumentNode;
export declare const GetChainDocument: DocumentNode;
export declare const GetTransactionDocument: DocumentNode;
export declare const GetTransactionWithReceiptsDocument: DocumentNode;
export declare const GetTransactionsDocument: DocumentNode;
export declare const GetTransactionsByOwnerDocument: DocumentNode;
export declare const EstimatePredicatesDocument: DocumentNode;
export declare const GetBlockDocument: DocumentNode;
export declare const GetBlockWithTransactionsDocument: DocumentNode;
export declare const GetBlocksDocument: DocumentNode;
export declare const GetCoinDocument: DocumentNode;
export declare const GetCoinsDocument: DocumentNode;
export declare const GetCoinsToSpendDocument: DocumentNode;
export declare const GetContractDocument: DocumentNode;
export declare const GetContractBalanceDocument: DocumentNode;
export declare const GetBalanceDocument: DocumentNode;
export declare const GetLatestGasPriceDocument: DocumentNode;
export declare const EstimateGasPriceDocument: DocumentNode;
export declare const GetBalancesDocument: DocumentNode;
export declare const GetMessagesDocument: DocumentNode;
export declare const GetMessageProofDocument: DocumentNode;
export declare const GetMessageStatusDocument: DocumentNode;
export declare const GetRelayedTransactionStatusDocument: DocumentNode;
export declare const DryRunDocument: DocumentNode;
export declare const SubmitDocument: DocumentNode;
export declare const ProduceBlocksDocument: DocumentNode;
export declare const GetMessageByNonceDocument: DocumentNode;
export declare const SubmitAndAwaitDocument: DocumentNode;
export declare const StatusChangeDocument: DocumentNode;
export type Requester<C = {}, E = unknown> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R> | AsyncIterable<R>;
export declare function getSdk<C, E>(requester: Requester<C, E>): {
    getVersion(variables?: GqlGetVersionQueryVariables, options?: C): Promise<GqlGetVersionQuery>;
    getNodeInfo(variables?: GqlGetNodeInfoQueryVariables, options?: C): Promise<GqlGetNodeInfoQuery>;
    getChain(variables?: GqlGetChainQueryVariables, options?: C): Promise<GqlGetChainQuery>;
    getTransaction(variables: GqlGetTransactionQueryVariables, options?: C): Promise<GqlGetTransactionQuery>;
    getTransactionWithReceipts(variables: GqlGetTransactionWithReceiptsQueryVariables, options?: C): Promise<GqlGetTransactionWithReceiptsQuery>;
    getTransactions(variables?: GqlGetTransactionsQueryVariables, options?: C): Promise<GqlGetTransactionsQuery>;
    getTransactionsByOwner(variables: GqlGetTransactionsByOwnerQueryVariables, options?: C): Promise<GqlGetTransactionsByOwnerQuery>;
    estimatePredicates(variables: GqlEstimatePredicatesQueryVariables, options?: C): Promise<GqlEstimatePredicatesQuery>;
    getBlock(variables?: GqlGetBlockQueryVariables, options?: C): Promise<GqlGetBlockQuery>;
    getBlockWithTransactions(variables?: GqlGetBlockWithTransactionsQueryVariables, options?: C): Promise<GqlGetBlockWithTransactionsQuery>;
    getBlocks(variables?: GqlGetBlocksQueryVariables, options?: C): Promise<GqlGetBlocksQuery>;
    getCoin(variables: GqlGetCoinQueryVariables, options?: C): Promise<GqlGetCoinQuery>;
    getCoins(variables: GqlGetCoinsQueryVariables, options?: C): Promise<GqlGetCoinsQuery>;
    getCoinsToSpend(variables: GqlGetCoinsToSpendQueryVariables, options?: C): Promise<GqlGetCoinsToSpendQuery>;
    getContract(variables: GqlGetContractQueryVariables, options?: C): Promise<GqlGetContractQuery>;
    getContractBalance(variables: GqlGetContractBalanceQueryVariables, options?: C): Promise<GqlGetContractBalanceQuery>;
    getBalance(variables: GqlGetBalanceQueryVariables, options?: C): Promise<GqlGetBalanceQuery>;
    getLatestGasPrice(variables?: GqlGetLatestGasPriceQueryVariables, options?: C): Promise<GqlGetLatestGasPriceQuery>;
    estimateGasPrice(variables: GqlEstimateGasPriceQueryVariables, options?: C): Promise<GqlEstimateGasPriceQuery>;
    getBalances(variables: GqlGetBalancesQueryVariables, options?: C): Promise<GqlGetBalancesQuery>;
    getMessages(variables: GqlGetMessagesQueryVariables, options?: C): Promise<GqlGetMessagesQuery>;
    getMessageProof(variables: GqlGetMessageProofQueryVariables, options?: C): Promise<GqlGetMessageProofQuery>;
    getMessageStatus(variables: GqlGetMessageStatusQueryVariables, options?: C): Promise<GqlGetMessageStatusQuery>;
    getRelayedTransactionStatus(variables: GqlGetRelayedTransactionStatusQueryVariables, options?: C): Promise<GqlGetRelayedTransactionStatusQuery>;
    dryRun(variables: GqlDryRunMutationVariables, options?: C): Promise<GqlDryRunMutation>;
    submit(variables: GqlSubmitMutationVariables, options?: C): Promise<GqlSubmitMutation>;
    produceBlocks(variables: GqlProduceBlocksMutationVariables, options?: C): Promise<GqlProduceBlocksMutation>;
    getMessageByNonce(variables: GqlGetMessageByNonceQueryVariables, options?: C): Promise<GqlGetMessageByNonceQuery>;
    submitAndAwait(variables: GqlSubmitAndAwaitSubscriptionVariables, options?: C): AsyncIterable<GqlSubmitAndAwaitSubscription>;
    statusChange(variables: GqlStatusChangeSubscriptionVariables, options?: C): AsyncIterable<GqlStatusChangeSubscription>;
};
export type Sdk = ReturnType<typeof getSdk>;
export {};
//# sourceMappingURL=operations.d.ts.map