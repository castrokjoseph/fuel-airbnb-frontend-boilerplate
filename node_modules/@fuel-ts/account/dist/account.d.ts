import { AbstractAccount } from '@fuel-ts/interfaces';
import type { AbstractAddress, BytesLike } from '@fuel-ts/interfaces';
import type { BigNumberish, BN } from '@fuel-ts/math';
import type { FuelConnector } from './connectors';
import type { TransactionRequestLike, CallResult, TransactionRequest, Coin, CoinQuantityLike, CoinQuantity, Message, Resource, ExcludeResourcesOption, Provider, ScriptTransactionRequestLike, ProviderSendTxParams, TransactionResponse, EstimateTransactionParams, TransactionCost } from './providers';
import { ScriptTransactionRequest } from './providers';
export type TxParamsType = Pick<ScriptTransactionRequestLike, 'gasLimit' | 'tip' | 'maturity' | 'maxFee' | 'witnessLimit'>;
export type TransferParams = {
    destination: string | AbstractAddress;
    amount: BigNumberish;
    assetId?: BytesLike;
};
export type EstimatedTxParams = Pick<TransactionCost, 'estimatedPredicates' | 'addedSignatures' | 'requiredQuantities' | 'updateMaxFee'>;
/**
 * `Account` provides an abstraction for interacting with accounts or wallets on the network.
 */
export declare class Account extends AbstractAccount {
    /**
     * The address associated with the account.
     */
    readonly address: AbstractAddress;
    /**
     * The provider used to interact with the network.
     */
    protected _provider?: Provider;
    /**
     * The connector for use with external wallets
     */
    protected _connector?: FuelConnector;
    /**
     * Creates a new Account instance.
     *
     * @param address - The address of the account.
     * @param provider - A Provider instance  (optional).
     * @param connector - A FuelConnector instance (optional).
     */
    constructor(address: string | AbstractAddress, provider?: Provider, connector?: FuelConnector);
    /**
     * The provider used to interact with the network.
     *
     * @returns A Provider instance.
     *
     * @throws `FuelError` if the provider is not set.
     */
    get provider(): Provider;
    /**
     * Sets the provider for the account.
     *
     * @param provider - A Provider instance.
     */
    set provider(provider: Provider);
    /**
     * Changes the provider connection for the account.
     *
     * @param provider - A Provider instance.
     * @returns The updated Provider instance.
     */
    connect(provider: Provider): Provider;
    /**
     * Retrieves resources satisfying the spend query for the account.
     *
     * @param quantities - Quantities of resources to be obtained.
     * @param excludedIds - IDs of resources to be excluded from the query (optional).
     * @returns A promise that resolves to an array of Resources.
     */
    getResourcesToSpend(quantities: CoinQuantityLike[], excludedIds?: ExcludeResourcesOption): Promise<Resource[]>;
    /**
     * Retrieves coins owned by the account.
     *
     * @param assetId - The asset ID of the coins to retrieve (optional).
     * @returns A promise that resolves to an array of Coins.
     */
    getCoins(assetId?: BytesLike): Promise<Coin[]>;
    /**
     * Retrieves messages owned by the account.
     *
     * @returns A promise that resolves to an array of Messages.
     */
    getMessages(): Promise<Message[]>;
    /**
     * Retrieves the balance of the account for the given asset.
     *
     * @param assetId - The asset ID to check the balance for (optional).
     * @returns A promise that resolves to the balance amount.
     */
    getBalance(assetId?: BytesLike): Promise<BN>;
    /**
     * Retrieves all the balances for the account.
     *
     * @returns A promise that resolves to an array of Coins and their quantities.
     */
    getBalances(): Promise<CoinQuantity[]>;
    /**
     * Funds a transaction request by adding the necessary resources.
     *
     * @typeParam T - The type of the TransactionRequest.
     * @param request - The transaction request to fund.
     * @param params - The estimated transaction parameters.
     * @returns A promise that resolves to the funded transaction request.
     */
    fund<T extends TransactionRequest>(request: T, params: EstimatedTxParams): Promise<T>;
    /**
     * A helper that creates a transfer transaction request and returns it.
     *
     * @param destination - The address of the destination.
     * @param amount - The amount of coins to transfer.
     * @param assetId - The asset ID of the coins to transfer (optional).
     * @param txParams - The transaction parameters (optional).
     * @returns A promise that resolves to the prepared transaction request.
     */
    createTransfer(destination: string | AbstractAddress, amount: BigNumberish, assetId?: BytesLike, txParams?: TxParamsType): Promise<TransactionRequest>;
    /**
     * Transfers coins to a destination address.
     *
     * @param destination - The address of the destination.
     * @param amount - The amount of coins to transfer.
     * @param assetId - The asset ID of the coins to transfer (optional).
     * @param txParams - The transaction parameters (optional).
     * @returns A promise that resolves to the transaction response.
     */
    transfer(destination: string | AbstractAddress, amount: BigNumberish, assetId?: BytesLike, txParams?: TxParamsType): Promise<TransactionResponse>;
    /**
     * Transfers multiple amounts of a token to multiple recipients.
     *
     * @param transferParams - An array of `TransferParams` objects representing the transfers to be made.
     * @param txParams - Optional transaction parameters.
     * @returns A promise that resolves to a `TransactionResponse` object representing the transaction result.
     */
    batchTransfer(transferParams: TransferParams[], txParams?: TxParamsType): Promise<TransactionResponse>;
    /**
     * Adds a transfer to the given transaction request.
     *
     * @param request - The script transaction request to add transfers to.
     * @param transferParams - The object representing the transfer to be made.
     * @returns The updated transaction request with the added transfer.
     */
    addTransfer(request: ScriptTransactionRequest, transferParams: TransferParams): ScriptTransactionRequest;
    /**
     * Adds multiple transfers to a script transaction request.
     *
     * @param request - The script transaction request to add transfers to.
     * @param transferParams - An array of `TransferParams` objects representing the transfers to be made.
     * @returns The updated script transaction request.
     */
    addBatchTransfer(request: ScriptTransactionRequest, transferParams: TransferParams[]): ScriptTransactionRequest;
    /**
     * Transfers coins to a contract address.
     *
     * @param contractId - The address of the contract.
     * @param amount - The amount of coins to transfer.
     * @param assetId - The asset ID of the coins to transfer (optional).
     * @param txParams - The transaction parameters (optional).
     * @returns A promise that resolves to the transaction response.
     */
    transferToContract(contractId: string | AbstractAddress, amount: BigNumberish, assetId?: BytesLike, txParams?: TxParamsType): Promise<TransactionResponse>;
    /**
     * Withdraws an amount of the base asset to the base chain.
     *
     * @param recipient - Address of the recipient on the base chain.
     * @param amount - Amount of base asset.
     * @param txParams - The transaction parameters (optional).
     * @returns A promise that resolves to the transaction response.
     */
    withdrawToBaseLayer(recipient: string | AbstractAddress, amount: BigNumberish, txParams?: TxParamsType): Promise<TransactionResponse>;
    /**
     * Sign a message from the account via the connector.
     *
     * @param message - the message to sign.
     * @returns a promise that resolves to the signature.
     *
     * @hidden
     */
    signMessage(message: string): Promise<string>;
    /**
     * Signs a transaction from the account via the connector..
     *
     * @param transactionRequestLike - The transaction request to sign.
     * @returns A promise that resolves to the signature of the transaction.
     */
    signTransaction(transactionRequestLike: TransactionRequestLike): Promise<string>;
    /**
     * Sends a transaction to the network.
     *
     * @param transactionRequestLike - The transaction request to be sent.
     * @param sendTransactionParams - The provider send transaction parameters (optional).
     * @returns A promise that resolves to the transaction response.
     */
    sendTransaction(transactionRequestLike: TransactionRequestLike, { estimateTxDependencies, awaitExecution }?: ProviderSendTxParams): Promise<TransactionResponse>;
    /**
     * Simulates a transaction.
     *
     * @param transactionRequestLike - The transaction request to be simulated.
     * @param estimateTxParams - The estimate transaction params (optional).
     * @returns A promise that resolves to the call result.
     */
    simulateTransaction(transactionRequestLike: TransactionRequestLike, { estimateTxDependencies }?: EstimateTransactionParams): Promise<CallResult>;
    /** @hidden * */
    private validateTransferAmount;
    /** @hidden * */
    private estimateAndFundTransaction;
    /** @hidden * */
    private validateGasLimitAndMaxFee;
}
//# sourceMappingURL=account.d.ts.map