export * from './types';
export declare const bufferFromString: (string: string, encoding?: import("./types").Encoding | undefined) => Uint8Array, decrypt: <T>(password: string, keystore: import("./types").Keystore) => Promise<T>, encrypt: <T>(password: string, data: T) => Promise<import("./types").Keystore>, keyFromPassword: (password: string, saltBuffer: Uint8Array) => Uint8Array, randomBytes: (length: number) => Uint8Array, stringFromBuffer: (buffer: Uint8Array, encoding?: import("./types").Encoding | undefined) => string, scrypt: (params: import("./types").IScryptParams) => Uint8Array, keccak256: (data: Uint8Array) => Uint8Array, decryptJsonWalletData: (data: Uint8Array, key: Uint8Array, iv: Uint8Array) => Promise<Uint8Array>, encryptJsonWalletData: (data: Uint8Array, key: Uint8Array, iv: Uint8Array) => Promise<Uint8Array>, pbkdf2: (password: import("@fuel-ts/interfaces").BytesLike, salt: import("@fuel-ts/interfaces").BytesLike, iterations: number, keylen: number, algo: "sha256" | "sha512") => string, computeHmac: (algorithm: "sha256" | "sha512", key: import("@fuel-ts/interfaces").BytesLike, data: import("@fuel-ts/interfaces").BytesLike) => string, ripemd160: (data: import("@fuel-ts/interfaces").BytesLike) => Uint8Array;
//# sourceMappingURL=index.browser.d.ts.map