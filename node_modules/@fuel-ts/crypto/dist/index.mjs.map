{"version":3,"sources":["../src/shared/scrypt.ts","../src/shared/keccak256.ts","../src/shared/ripemd160.ts","../src/node/aes-ctr.ts","../src/node/bufferFromString.ts","../src/node/pbkdf2.ts","../src/node/randomBytes.ts","../src/node/stringFromBuffer.ts","../src/node/encryptJsonWalletData.ts","../src/node/hmac.ts","../src/node/index.ts","../src/index.ts"],"sourcesContent":["import { scrypt as scryptNoble } from '@noble/hashes/scrypt';\n\nimport type { IScryptParams } from '../types';\n\nexport const scrypt = (params: IScryptParams): Uint8Array => {\n  const { password, salt, n, p, r, dklen } = params;\n  const derivedKey = scryptNoble(password, salt, { N: n, r, p, dkLen: dklen });\n\n  return derivedKey;\n};\n","import { keccak_256 } from '@noble/hashes/sha3';\n\nexport const keccak256 = (data: Uint8Array): Uint8Array => keccak_256(data);\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BytesLike } from '@fuel-ts/interfaces';\nimport { arrayify } from '@fuel-ts/utils';\nimport { ripemd160 as noble_ripemd160 } from '@noble/hashes/ripemd160';\n\nlet locked = false;\n\nconst helper = (data: Uint8Array): Uint8Array => noble_ripemd160(data);\n\nlet ripemd: (data: Uint8Array) => Uint8Array = helper;\n\nexport function ripemd160(_data: BytesLike): Uint8Array {\n  const data = arrayify(_data, 'data');\n  return ripemd(data);\n}\nripemd160._ = helper;\nripemd160.lock = (): void => {\n  locked = true;\n};\nripemd160.register = (func: (data: Uint8Array) => Uint8Array) => {\n  if (locked) {\n    throw new FuelError(ErrorCode.HASHER_LOCKED, 'ripemd160 is locked');\n  }\n  ripemd = func;\n};\nObject.freeze(ripemd160);\n","import { FuelError, ErrorCode } from '@fuel-ts/errors';\nimport { arrayify } from '@fuel-ts/utils';\nimport crypto from 'crypto';\n\nimport type { CryptoApi, Keystore } from '../types';\n\nimport { bufferFromString } from './bufferFromString';\nimport { pbkdf2 } from './pbkdf2';\nimport { randomBytes } from './randomBytes';\nimport { stringFromBuffer } from './stringFromBuffer';\n\nconst ALGORITHM = 'aes-256-ctr';\n\n/**\n * Generate a pbkdf2 key from a password and random salt\n */\nexport const keyFromPassword: CryptoApi['keyFromPassword'] = (\n  password: string,\n  saltBuffer: Uint8Array\n): Uint8Array => {\n  const passBuffer = bufferFromString(String(password).normalize('NFKC'), 'utf-8');\n  const key = pbkdf2(passBuffer, saltBuffer, 100000, 32, 'sha256');\n\n  return arrayify(key);\n};\n\n/**\n * Encrypts a data object that can be any serializable value using\n * a provided password.\n *\n * @returns Promise<Keystore> object\n */\nexport const encrypt: CryptoApi['encrypt'] = async <T>(\n  password: string,\n  data: T\n): Promise<Keystore> => {\n  const iv = randomBytes(16);\n  const salt = randomBytes(32);\n  const secret = keyFromPassword(password, salt);\n  const dataBuffer = Uint8Array.from(Buffer.from(JSON.stringify(data), 'utf-8'));\n\n  const cipher = await crypto.createCipheriv(ALGORITHM, secret, iv);\n  let cipherData = cipher.update(dataBuffer);\n  cipherData = Buffer.concat([cipherData, cipher.final()]);\n\n  return {\n    data: stringFromBuffer(cipherData),\n    iv: stringFromBuffer(iv),\n    salt: stringFromBuffer(salt),\n  };\n};\n\n/**\n * Given a password and a keystore object, decrypts the text and returns\n * the resulting value\n */\nexport const decrypt: CryptoApi['decrypt'] = async <T>(\n  password: string,\n  keystore: Keystore\n): Promise<T> => {\n  const iv = bufferFromString(keystore.iv);\n  const salt = bufferFromString(keystore.salt);\n  const secret = keyFromPassword(password, salt);\n  const encryptedText = bufferFromString(keystore.data);\n\n  const decipher = await crypto.createDecipheriv(ALGORITHM, secret, iv);\n  const decrypted = decipher.update(encryptedText);\n  const deBuff = Buffer.concat([decrypted, decipher.final()]);\n  const decryptedData = Buffer.from(deBuff).toString('utf-8');\n\n  try {\n    return JSON.parse(decryptedData);\n  } catch {\n    throw new FuelError(ErrorCode.INVALID_CREDENTIALS, 'Invalid credentials.');\n  }\n};\n","import type { CryptoApi, Encoding } from '../types';\n\nexport const bufferFromString: CryptoApi['bufferFromString'] = (\n  string: string,\n  encoding: Encoding = 'base64'\n): Uint8Array => Uint8Array.from(Buffer.from(string, encoding));\n","import { ErrorCode, FuelError } from '@fuel-ts/errors';\nimport type { BytesLike } from '@fuel-ts/interfaces';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\nimport { pbkdf2Sync } from 'crypto';\n\nlet locked = false;\n\nconst PBKDF2 = (\n  password: Uint8Array,\n  salt: Uint8Array,\n  iterations: number,\n  keylen: number,\n  algo: 'sha256' | 'sha512'\n): BytesLike => pbkdf2Sync(password, salt, iterations, keylen, algo);\n\nlet pBkdf2 = PBKDF2;\n\nexport function pbkdf2(\n  _password: BytesLike,\n  _salt: BytesLike,\n  iterations: number,\n  keylen: number,\n  algo: 'sha256' | 'sha512'\n): string {\n  const password = arrayify(_password, 'password');\n  const salt = arrayify(_salt, 'salt');\n  return hexlify(pBkdf2(password, salt, iterations, keylen, algo));\n}\npbkdf2._ = PBKDF2;\npbkdf2.lock = (): void => {\n  locked = true;\n};\npbkdf2.register = (\n  func: (\n    password: Uint8Array,\n    salt: Uint8Array,\n    iterations: number,\n    keylen: number,\n    algo: 'sha256' | 'sha512'\n  ) => BytesLike\n) => {\n  if (locked) {\n    throw new FuelError(ErrorCode.HASHER_LOCKED, 'pbkdf2 is locked');\n  }\n  pBkdf2 = func;\n};\nObject.freeze(pbkdf2);\n","import crypto from 'crypto';\n\nimport type { CryptoApi } from '../types';\n\nexport const randomBytes: CryptoApi['randomBytes'] = (length: number): Uint8Array => {\n  const randomValues = Uint8Array.from(crypto.randomBytes(length));\n  return randomValues;\n};\n","import type { CryptoApi, Encoding } from '../types';\n\nexport const stringFromBuffer: CryptoApi['stringFromBuffer'] = (\n  buffer: Uint8Array,\n  encoding: Encoding = 'base64'\n): string => Buffer.from(buffer).toString(encoding);\n","import crypto from 'crypto';\n\nexport async function encryptJsonWalletData(data: Uint8Array, key: Uint8Array, iv: Uint8Array) {\n  const cipher = await crypto.createCipheriv('aes-128-ctr', key.subarray(0, 16), iv);\n\n  const encrypted = Buffer.concat([cipher.update(data), cipher.final()]);\n\n  return new Uint8Array(encrypted);\n}\n\nexport async function decryptJsonWalletData(data: Uint8Array, key: Uint8Array, iv: Uint8Array) {\n  const decipher = crypto.createDecipheriv('aes-128-ctr', key.subarray(0, 16), iv);\n\n  const decrypted = await Buffer.concat([decipher.update(data), decipher.final()]);\n\n  return new Uint8Array(decrypted);\n}\n","import { FuelError, ErrorCode } from '@fuel-ts/errors';\nimport type { BytesLike } from '@fuel-ts/interfaces';\nimport { arrayify, hexlify } from '@fuel-ts/utils';\nimport { createHmac } from 'crypto';\n\nlet locked = false;\n\nconst COMPUTEHMAC = (\n  algorithm: 'sha256' | 'sha512',\n  key: Uint8Array,\n  data: Uint8Array\n): BytesLike => createHmac(algorithm, key).update(data).digest();\n\nlet computeHMAC = COMPUTEHMAC;\n\nexport function computeHmac(\n  algorithm: 'sha256' | 'sha512',\n  _key: Uint8Array,\n  _data: Uint8Array\n): string {\n  const key = arrayify(_key, 'key');\n  const data = arrayify(_data, 'data');\n  return hexlify(computeHMAC(algorithm, key, data));\n}\ncomputeHmac._ = COMPUTEHMAC;\ncomputeHmac.lock = () => {\n  locked = true;\n};\ncomputeHmac.register = (\n  func: (algorithm: 'sha256' | 'sha512', key: Uint8Array, data: Uint8Array) => BytesLike\n) => {\n  if (locked) {\n    throw new FuelError(ErrorCode.HASHER_LOCKED, 'computeHmac is locked');\n  }\n  computeHMAC = func;\n};\nObject.freeze(computeHmac);\n","import { scrypt, keccak256, ripemd160 } from '../shared';\nimport type { CryptoApi } from '../types';\n\nimport { decrypt, encrypt, keyFromPassword } from './aes-ctr';\nimport { bufferFromString } from './bufferFromString';\nimport { decryptJsonWalletData, encryptJsonWalletData } from './encryptJsonWalletData';\nimport { computeHmac } from './hmac';\nimport { pbkdf2 } from './pbkdf2';\nimport { randomBytes } from './randomBytes';\nimport { stringFromBuffer } from './stringFromBuffer';\n\nconst api: CryptoApi = {\n  bufferFromString,\n  stringFromBuffer,\n  decrypt,\n  encrypt,\n  keyFromPassword,\n  randomBytes,\n  scrypt,\n  keccak256,\n  decryptJsonWalletData,\n  encryptJsonWalletData,\n  computeHmac,\n  pbkdf2,\n  ripemd160,\n};\n\nexport default api;\n","import cryptoApi from './node';\n\nexport * from './types';\n\nexport const {\n  bufferFromString,\n  decrypt,\n  encrypt,\n  keyFromPassword,\n  randomBytes,\n  stringFromBuffer,\n  scrypt,\n  keccak256,\n  decryptJsonWalletData,\n  encryptJsonWalletData,\n  computeHmac,\n  pbkdf2,\n  ripemd160,\n} = cryptoApi;\n"],"mappings":"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","names":["FuelError","ErrorCode","arrayify","crypto","ErrorCode","FuelError","arrayify","locked","arrayify","crypto","FuelError","ErrorCode","crypto","FuelError","ErrorCode","arrayify","hexlify","locked","bufferFromString","decrypt","encrypt","keyFromPassword","randomBytes","stringFromBuffer","scrypt","keccak256","decryptJsonWalletData","encryptJsonWalletData","computeHmac","pbkdf2","ripemd160"]}