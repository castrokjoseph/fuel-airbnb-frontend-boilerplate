{"version":3,"sources":["../src/cli.ts","../src/cli/utils/logger.ts","../src/cli/config/forcUtils.ts","../src/cli/commands/deploy/createWallet.ts","../src/cli/commands/deploy/deployContract.ts","../src/cli/commands/deploy/getDeployConfig.ts","../src/cli/commands/deploy/saveContractIds.ts","../src/cli/commands/deploy/index.ts","../src/cli/commands/dev/autoStartFuelCore.ts","../src/cli/commands/build/buildSwayProgram.ts","../src/cli/commands/build/forcHandlers.ts","../src/cli/commands/build/buildSwayPrograms.ts","../src/cli/commands/build/generateTypes.ts","../src/cli/templates/index.ts","../src/cli/commands/build/index.ts","../src/cli/commands/dev/index.ts","../src/cli/config/loadConfig.ts","../src/cli/config/validateConfig.ts","../src/cli/commands/withConfig.ts","../src/cli/commands/init/index.ts","../src/cli/templates/fuels.config.ts","../src/cli/commands/node/index.ts","../src/cli/commands/withBinaryPaths.ts","../src/cli/commands/withProgram.ts"],"sourcesContent":["import { configureCliOptions as configureTypegenCliOptions } from '@fuel-ts/abi-typegen/cli';\nimport { versions } from '@fuel-ts/versions';\nimport { runVersions } from '@fuel-ts/versions/cli';\nimport { Command, Option } from 'commander';\n\nimport { build } from './cli/commands/build';\nimport { deploy } from './cli/commands/deploy';\nimport { dev } from './cli/commands/dev';\nimport { init } from './cli/commands/init';\nimport { node } from './cli/commands/node';\nimport { withBinaryPaths } from './cli/commands/withBinaryPaths';\nimport { withConfig } from './cli/commands/withConfig';\nimport { withProgram } from './cli/commands/withProgram';\nimport { Commands } from './cli/types';\nimport { configureLogging } from './cli/utils/logger';\n\nexport const onPreAction = (command: Command) => {\n  const opts = command.opts();\n  configureLogging({\n    isDebugEnabled: opts.debug,\n    isLoggingEnabled: !opts.silent,\n  });\n};\n\nexport const configureCli = () => {\n  const program = new Command();\n\n  program.name('fuels');\n\n  program.option('-D, --debug', 'Enables verbose logging', false);\n  program.option('-S, --silent', 'Omit output messages', false);\n\n  program.version(versions.FUELS, '-v, --version', 'Output the version number');\n  program.helpOption('-h, --help', 'Display help');\n  program.addHelpCommand('help [command]', 'Display help for command');\n\n  program.enablePositionalOptions(true);\n\n  program.hook('preAction', onPreAction);\n\n  /**\n   * Defining local commands\n   */\n\n  const pathOption = new Option('-p, --path <path>', 'Path to project root').default(process.cwd());\n\n  let command: Command;\n\n  const desc = `Relative path/globals to `;\n  const arg = `<path|global>`;\n\n  (command = program.command(Commands.init))\n    .description('Create a sample `fuel.config.ts` file')\n    .addOption(pathOption)\n    .option('-w, --workspace <path>', 'Relative dir path to Forc workspace')\n    .addOption(new Option(`-c, --contracts ${arg}`, `${desc} Contracts`).conflicts('workspace'))\n    .addOption(new Option(`-s, --scripts ${arg}`, `${desc} Scripts`).conflicts('workspace'))\n    .addOption(new Option(`-p, --predicates ${arg}`, `${desc} Predicates`).conflicts('workspace'))\n    .requiredOption('-o, --output <path>', 'Relative dir path for Typescript generation output')\n    .option('--forc-path <path>', 'Path to the `forc` binary')\n    .option('--fuel-core-path <path>', 'Path to the `fuel-core` binary')\n    .option('--auto-start-fuel-core', 'Auto-starts a `fuel-core` node during `dev` command')\n    .action(withProgram(command, Commands.init, init));\n\n  (command = program.command(Commands.dev))\n    .description('Start a Fuel node and run build + deploy on every file change')\n    .addOption(pathOption)\n    .action(withConfig(command, Commands.dev, dev));\n\n  (command = program.command(Commands.node))\n    .description('Start a Fuel node')\n    .addOption(pathOption)\n    .action(withConfig(command, Commands.node, node));\n\n  (command = program.command(Commands.build))\n    .description('Build Sway programs and generate Typescript for them')\n    .addOption(pathOption)\n    .option(\n      '-d, --deploy',\n      'Deploy contracts after build (auto-starts a `fuel-core` node if needed)'\n    )\n    .action(withConfig(command, Commands.build, build));\n\n  (command = program.command(Commands.deploy))\n    .description('Deploy contracts to the Fuel network')\n    .addOption(pathOption)\n    .action(withConfig(command, Commands.deploy, deploy));\n\n  /**\n   * Routing external commands from sub-packages' CLIs\n   */\n\n  // Typegen\n  configureTypegenCliOptions(\n    program.command('typegen').description(`Generate Typescript from Sway ABI JSON files`)\n  );\n\n  // Versions\n  (command = program.command('versions'))\n    .description('Check for version incompatibilities')\n    .addOption(pathOption)\n    .action(withBinaryPaths(command, Commands.versions, runVersions));\n\n  return program;\n};\n","import chalk from 'chalk';\n\nexport const loggingConfig = {\n  isDebugEnabled: false,\n  isLoggingEnabled: true,\n};\n\nexport function configureLogging(params: { isDebugEnabled: boolean; isLoggingEnabled: boolean }) {\n  loggingConfig.isLoggingEnabled = params.isLoggingEnabled;\n  loggingConfig.isDebugEnabled = params.isDebugEnabled && loggingConfig.isLoggingEnabled;\n}\n\nexport function log(...data: unknown[]) {\n  if (loggingConfig.isLoggingEnabled) {\n    process.stdout.write(`${data.join(' ')}\\n`);\n  }\n}\n\nexport function debug(...data: unknown[]) {\n  if (loggingConfig.isDebugEnabled) {\n    log(data);\n  }\n}\n\nexport function error(...data: unknown[]) {\n  process.stderr.write(`${chalk.red(data.join(' '))}\\n`);\n}\n\nexport function warn(...data: unknown[]) {\n  log(`${chalk.yellow(data.join(' '))}\\n`);\n}\n","import { readFileSync, existsSync } from 'fs';\nimport camelCase from 'lodash.camelcase';\nimport { join } from 'path';\nimport toml from 'toml';\n\nimport type { FuelsConfig } from '../types';\n\nexport type ForcToml = {\n  project: {\n    authors?: string[];\n    entry: string;\n    license: string;\n    name: string;\n  };\n  workspace: {\n    members: string[];\n  };\n  dependencies: {\n    [key: string]: string;\n  };\n};\n\nexport enum SwayType {\n  contract = 'contract',\n  script = 'script',\n  predicate = 'predicate',\n  library = 'library',\n}\n\nexport const forcFiles = new Map<string, ForcToml>();\n\nexport const swayFiles = new Map<string, SwayType>();\n\nexport function readForcToml(path: string) {\n  const forcPath = join(path, './Forc.toml');\n\n  if (!existsSync(forcPath)) {\n    throw new Error(`Toml file not found:\\n  ${forcPath}`);\n  }\n\n  if (!forcFiles.has(forcPath)) {\n    const forcFile = readFileSync(forcPath, 'utf8');\n    const tomlParsed = toml.parse(forcFile);\n    forcFiles.set(forcPath, tomlParsed);\n  }\n\n  const tomlContents = forcFiles.get(forcPath) as ForcToml;\n\n  return tomlContents;\n}\n\nexport function readSwayType(path: string) {\n  const forcToml = readForcToml(path);\n  const entryFile = forcToml.project.entry || 'main.sw';\n  const swayEntryPath = join(path, 'src', entryFile);\n\n  if (!swayFiles.has(swayEntryPath)) {\n    const swayFile = readFileSync(swayEntryPath, 'utf8');\n    const swayTypeLines = Object.values(SwayType).map((type) => `${type};`);\n    const swayType = swayFile\n      .split('\\n')\n      .find((line) => swayTypeLines.some((swayTypeLine) => line === swayTypeLine))\n      ?.split(';')[0];\n    swayFiles.set(swayEntryPath, swayType as SwayType);\n  }\n\n  return swayFiles.get(swayEntryPath) as SwayType;\n}\n\nexport function getContractName(contractPath: string) {\n  const { project } = readForcToml(contractPath);\n  return project.name;\n}\n\nexport function getContractCamelCase(contractPath: string) {\n  const projectName = getContractName(contractPath);\n  return camelCase(projectName);\n}\n\nexport function getBinaryPath(contractPath: string, { buildMode }: FuelsConfig) {\n  const projectName = getContractName(contractPath);\n  return join(contractPath, `/out/${buildMode}/${projectName}.bin`);\n}\n\nexport function getABIPath(contractPath: string, { buildMode }: FuelsConfig) {\n  const projectName = getContractName(contractPath);\n  return join(contractPath, `/out/${buildMode}/${projectName}-abi.json`);\n}\n\nexport function getABIPaths(paths: string[], config: FuelsConfig) {\n  return Promise.all(paths.map((path) => getABIPath(path, config)));\n}\n\nexport const getStorageSlotsPath = (contractPath: string, { buildMode }: FuelsConfig) => {\n  const projectName = getContractName(contractPath);\n  return join(contractPath, `/out/${buildMode}/${projectName}-storage_slots.json`);\n};\n","import { Wallet, Provider } from '@fuel-ts/account';\nimport { FuelError } from '@fuel-ts/errors';\n\nexport async function createWallet(providerUrl: string, privateKey?: string) {\n  let pvtKey: string;\n\n  if (privateKey) {\n    pvtKey = privateKey;\n  } else if (process.env.PRIVATE_KEY) {\n    pvtKey = process.env.PRIVATE_KEY;\n  } else {\n    throw new Error('You must provide a privateKey via config.privateKey or env PRIVATE_KEY');\n  }\n\n  try {\n    const provider = await Provider.create(providerUrl);\n\n    return Wallet.fromPrivateKey(pvtKey, provider);\n  } catch (e) {\n    const error = e as Error & { cause?: { code: string } };\n    if (/EADDRNOTAVAIL|ECONNREFUSED/.test(error.cause?.code ?? '')) {\n      throw new FuelError(\n        FuelError.CODES.CONNECTION_REFUSED,\n        `Couldn't connect to the node at \"${providerUrl}\". Check that you've got a node running at the config's providerUrl or set autoStartFuelCore to true.`\n      );\n    } else {\n      throw error;\n    }\n  }\n}\n","import type { WalletUnlocked } from '@fuel-ts/account';\nimport { ContractFactory } from '@fuel-ts/contract';\nimport type { DeployContractOptions } from '@fuel-ts/contract';\nimport { existsSync, readFileSync } from 'fs';\n\nimport { debug } from '../../utils/logger';\n\nexport async function deployContract(\n  wallet: WalletUnlocked,\n  binaryPath: string,\n  abiPath: string,\n  storageSlotsPath: string,\n  deployConfig: DeployContractOptions\n) {\n  debug(`Deploying contract for ABI: ${abiPath}`);\n\n  const bytecode = readFileSync(binaryPath);\n\n  if (existsSync(storageSlotsPath)) {\n    const storageSlots = JSON.parse(readFileSync(storageSlotsPath, 'utf-8'));\n    // eslint-disable-next-line no-param-reassign\n    deployConfig.storageSlots = storageSlots;\n  }\n\n  const abi = JSON.parse(readFileSync(abiPath, 'utf-8'));\n  const contractFactory = new ContractFactory(bytecode, abi, wallet);\n\n  const contract = await contractFactory.deployContract(deployConfig);\n  return contract.id.toB256();\n}\n","import type { DeployContractOptions } from '@fuel-ts/contract';\n\nimport type { ContractDeployOptions, OptionsFunction } from '../../types';\n\nexport async function getDeployConfig(\n  deployConfig: DeployContractOptions | OptionsFunction,\n  options: ContractDeployOptions\n) {\n  let config: DeployContractOptions;\n\n  if (typeof deployConfig === 'function') {\n    config = await deployConfig(options);\n  } else {\n    config = deployConfig;\n  }\n\n  return config;\n}\n","import { writeFile, mkdir } from 'fs/promises';\nimport { resolve } from 'path';\n\nimport type { DeployedContract } from '../../types';\nimport { log } from '../../utils/logger';\n\nexport async function saveContractIds(contracts: DeployedContract[], output: string) {\n  const contractsMap = contracts.reduce(\n    (cConfig, { name, contractId }) => ({\n      ...cConfig,\n      [name]: contractId,\n    }),\n    {}\n  );\n\n  const filePath = resolve(output, 'contract-ids.json');\n\n  await mkdir(output, { recursive: true });\n  await writeFile(filePath, JSON.stringify(contractsMap, null, 2));\n\n  log(`Contract IDs saved at: ${filePath}`);\n}\n","import {\n  getBinaryPath,\n  getABIPath,\n  getContractName,\n  getContractCamelCase,\n  getStorageSlotsPath,\n} from '../../config/forcUtils';\nimport type { FuelsConfig, DeployedContract } from '../../types';\nimport { debug, log } from '../../utils/logger';\n\nimport { createWallet } from './createWallet';\nimport { deployContract } from './deployContract';\nimport { getDeployConfig } from './getDeployConfig';\nimport { saveContractIds } from './saveContractIds';\n\nexport async function deploy(config: FuelsConfig) {\n  const contracts: DeployedContract[] = [];\n\n  const wallet = await createWallet(config.providerUrl, config.privateKey);\n\n  log(`Deploying contracts to: ${wallet.provider.url}`);\n\n  const contractsLen = config.contracts.length;\n\n  for (let i = 0; i < contractsLen; i++) {\n    const contractPath = config.contracts[i];\n    const binaryPath = getBinaryPath(contractPath, config);\n    const abiPath = getABIPath(contractPath, config);\n    const storageSlotsPath = getStorageSlotsPath(contractPath, config);\n    const projectName = getContractName(contractPath);\n    const contractName = getContractCamelCase(contractPath);\n    const deployConfig = await getDeployConfig(config.deployConfig, {\n      contracts: Array.from(contracts),\n      contractName,\n      contractPath,\n    });\n\n    const contractId = await deployContract(\n      wallet,\n      binaryPath,\n      abiPath,\n      storageSlotsPath,\n      deployConfig\n    );\n\n    debug(`Contract deployed: ${projectName} - ${contractId}`);\n\n    contracts.push({\n      name: contractName,\n      contractId,\n    });\n  }\n\n  await saveContractIds(contracts, config.output);\n\n  return contracts;\n}\n","import { launchNode } from '@fuel-ts/account/test-utils';\nimport { defaultConsensusKey } from '@fuel-ts/utils';\nimport type { ChildProcessWithoutNullStreams } from 'child_process';\nimport { getPortPromise } from 'portfinder';\n\nimport type { FuelsConfig } from '../../types';\nimport { log, loggingConfig } from '../../utils/logger';\n\nexport type FuelCoreNode = {\n  bindIp: string;\n  accessIp: string;\n  port: number;\n  providerUrl: string;\n  snapshotDir: string;\n  killChildProcess: () => void;\n};\n\nexport type KillNodeParams = {\n  core: ChildProcessWithoutNullStreams;\n  killFn: (pid: number) => void;\n  state: {\n    isDead: boolean;\n  };\n};\n\nexport const autoStartFuelCore = async (config: FuelsConfig) => {\n  let fuelCore: FuelCoreNode | undefined;\n\n  if (config.autoStartFuelCore) {\n    log(`Starting node using: '${config.fuelCorePath}'`);\n\n    const bindIp = '0.0.0.0';\n    const accessIp = '127.0.0.1';\n\n    const port = config.fuelCorePort ?? (await getPortPromise({ port: 4000 }));\n\n    const providerUrl = `http://${accessIp}:${port}/v1/graphql`;\n\n    const { cleanup, snapshotDir } = await launchNode({\n      args: [\n        ['--snapshot', config.snapshotDir],\n        ['--db-type', 'in-memory'],\n      ].flat() as string[],\n      ip: bindIp,\n      port: port.toString(),\n      loggingEnabled: loggingConfig.isLoggingEnabled,\n      debugEnabled: loggingConfig.isDebugEnabled,\n      basePath: config.basePath,\n      fuelCorePath: config.fuelCorePath,\n    });\n\n    fuelCore = {\n      bindIp,\n      accessIp,\n      port,\n      providerUrl,\n      snapshotDir,\n      killChildProcess: cleanup,\n    };\n\n    // eslint-disable-next-line no-param-reassign\n    config.providerUrl = fuelCore.providerUrl;\n    // eslint-disable-next-line no-param-reassign\n    config.privateKey = defaultConsensusKey;\n  }\n\n  return fuelCore;\n};\n","import { spawn } from 'child_process';\n\nimport type { FuelsConfig } from '../../types';\nimport { debug, loggingConfig } from '../../utils/logger';\n\nimport { onForcExit, onForcError } from './forcHandlers';\n\nexport const buildSwayProgram = async (config: FuelsConfig, path: string) => {\n  debug('Building Sway program', path);\n\n  return new Promise<void>((resolve, reject) => {\n    const args = ['build', '-p', path].concat(config.forcBuildFlags);\n    const forc = spawn(config.forcPath, args, { stdio: 'pipe' });\n\n    if (loggingConfig.isLoggingEnabled) {\n      forc.stderr?.pipe(process.stderr);\n    }\n\n    if (loggingConfig.isDebugEnabled) {\n      forc.stdout?.pipe(process.stdout);\n    }\n\n    const onExit = onForcExit(resolve, reject);\n    const onError = onForcError(reject);\n\n    forc.on('exit', onExit);\n    forc.on('error', onError);\n  });\n};\n","import { error } from '../../utils/logger';\n\ntype OnResultFn = () => void;\ntype OnErrorFn = (reason?: number | Error) => void;\n\nexport const onForcExit =\n  (onResultFn: OnResultFn, onErrorFn: OnErrorFn) => (code: number | null) => {\n    if (code) {\n      onErrorFn(code);\n      //  process.exit()?\n    } else {\n      onResultFn();\n    }\n  };\n\nexport const onForcError = (onError: OnErrorFn) => (err: Error) => {\n  error(err);\n  onError(err);\n};\n","import type { FuelsConfig } from '../../types';\nimport { log } from '../../utils/logger';\n\nimport { buildSwayProgram } from './buildSwayProgram';\n\nexport async function buildSwayPrograms(config: FuelsConfig) {\n  log(`Building Sway programs using: '${config.forcPath}'`);\n\n  const paths = config.workspace\n    ? [config.workspace]\n    : [config.contracts, config.predicates, config.scripts].flat();\n\n  await Promise.all(paths.map((path) => buildSwayProgram(config, path)));\n}\n","import { ProgramTypeEnum } from '@fuel-ts/abi-typegen';\nimport { runTypegen } from '@fuel-ts/abi-typegen/runTypegen';\nimport { writeFileSync, mkdirSync } from 'fs';\nimport { join } from 'path';\n\nimport { getABIPaths } from '../../config/forcUtils';\nimport { renderIndexTemplate } from '../../templates';\nimport type { FuelsConfig } from '../../types';\nimport { debug, log, loggingConfig } from '../../utils/logger';\n\nasync function generateTypesForProgramType(\n  config: FuelsConfig,\n  paths: string[],\n  programType: ProgramTypeEnum\n) {\n  debug('Generating types..');\n\n  const filepaths = await getABIPaths(paths, config);\n  const pluralizedDirName = `${String(programType).toLocaleLowerCase()}s`;\n\n  runTypegen({\n    programType,\n    cwd: config.basePath,\n    filepaths,\n    output: join(config.output, pluralizedDirName),\n    silent: !loggingConfig.isDebugEnabled,\n  });\n\n  return pluralizedDirName;\n}\n\nexport async function generateTypes(config: FuelsConfig) {\n  log('Generating types..');\n\n  const { contracts, scripts, predicates, output } = config;\n\n  mkdirSync(output, { recursive: true });\n\n  const members = [\n    { type: ProgramTypeEnum.CONTRACT, programs: contracts },\n    { type: ProgramTypeEnum.SCRIPT, programs: scripts },\n    { type: ProgramTypeEnum.PREDICATE, programs: predicates },\n  ];\n\n  const pluralizedDirNames = await Promise.all(\n    members\n      .filter(({ programs }) => !!programs.length)\n      .map(({ programs, type }) => generateTypesForProgramType(config, programs, type))\n  );\n\n  const indexFile = await renderIndexTemplate(pluralizedDirNames);\n\n  writeFileSync(join(config.output, 'index.ts'), indexFile);\n}\n","/* eslint-disable @typescript-eslint/triple-slash-reference */\n/// <reference path=\"../../hbs.d.ts\" />\n\n// TODO: once abi-typegen implements a way to generate all types of sway\n// programs in a bundle file we don't need to create a index.ts file\nimport Handlebars from 'handlebars';\n\nimport indexTemplate from './index.hbs';\n\nexport function renderIndexTemplate(paths: string[]) {\n  const renderTemplate = Handlebars.compile(indexTemplate, {\n    strict: true,\n    noEscape: true,\n  });\n  return renderTemplate({\n    paths,\n  });\n}\n","import { type Command } from 'commander';\n\nimport type { FuelsConfig } from '../../types';\nimport { log } from '../../utils/logger';\nimport { deploy } from '../deploy';\nimport { autoStartFuelCore } from '../dev/autoStartFuelCore';\n\nimport { buildSwayPrograms } from './buildSwayPrograms';\nimport { generateTypes } from './generateTypes';\n\nexport async function build(config: FuelsConfig, program?: Command) {\n  log('Building..');\n\n  await buildSwayPrograms(config);\n  await generateTypes(config);\n\n  const options = program?.opts();\n\n  if (options?.deploy) {\n    const fuelCore = await autoStartFuelCore(config);\n    await deploy(config);\n    fuelCore?.killChildProcess();\n  }\n}\n","import type { FSWatcher } from 'chokidar';\nimport { watch } from 'chokidar';\nimport { globSync } from 'glob';\n\nimport { loadConfig } from '../../config/loadConfig';\nimport type { FuelsConfig } from '../../types';\nimport { error, log } from '../../utils/logger';\nimport { build } from '../build';\nimport { deploy } from '../deploy';\nimport { withConfigErrorHandler } from '../withConfig';\n\nimport type { FuelCoreNode } from './autoStartFuelCore';\nimport { autoStartFuelCore } from './autoStartFuelCore';\n\nexport const closeAllFileHandlers = (handlers: FSWatcher[]) => {\n  handlers.forEach((h) => h.close());\n};\n\nexport const buildAndDeploy = async (config: FuelsConfig) => {\n  await build(config);\n  return deploy(config);\n};\n\nexport const getConfigFilepathsToWatch = (config: FuelsConfig) => {\n  const configFilePathsToWatch: string[] = [config.configPath];\n  if (config.snapshotDir) {\n    configFilePathsToWatch.push(config.snapshotDir);\n  }\n  return configFilePathsToWatch;\n};\n\nexport type DevState = {\n  config: FuelsConfig;\n  watchHandlers: FSWatcher[];\n  fuelCore?: FuelCoreNode;\n};\n\nexport const workspaceFileChanged = (state: DevState) => async (_event: string, path: string) => {\n  log(`\\nFile changed: ${path}`);\n  await buildAndDeploy(state.config);\n};\n\nexport const configFileChanged = (state: DevState) => async (_event: string, path: string) => {\n  log(`\\nFile changed: ${path}`);\n\n  closeAllFileHandlers(state.watchHandlers);\n  state.fuelCore?.killChildProcess();\n\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    await dev(await loadConfig(state.config.basePath));\n  } catch (err: unknown) {\n    await withConfigErrorHandler(<Error>err, state.config);\n  }\n};\n\nexport const dev = async (config: FuelsConfig) => {\n  const fuelCore = await autoStartFuelCore(config);\n\n  const configFilePaths = getConfigFilepathsToWatch(config);\n\n  const { contracts, scripts, predicates, basePath: cwd } = config;\n\n  const workspaceFilePaths = [contracts, predicates, scripts]\n    .flat()\n    .flatMap((dir) => [\n      dir,\n      globSync(`${dir}/**/*.toml`, { cwd }),\n      globSync(`${dir}/**/*.sw`, { cwd }),\n    ])\n    .flat();\n\n  try {\n    // Run once\n    await buildAndDeploy(config);\n\n    const watchHandlers: FSWatcher[] = [];\n    const options = { persistent: true, ignoreInitial: true, ignored: '**/out/**' };\n    const state = { config, watchHandlers, fuelCore };\n\n    // watch: fuels.config.ts and snapshotDir\n    watchHandlers.push(watch(configFilePaths, options).on('all', configFileChanged(state)));\n\n    // watch: Forc's workspace members\n    watchHandlers.push(watch(workspaceFilePaths, options).on('all', workspaceFileChanged(state)));\n  } catch (err: unknown) {\n    error(err);\n    throw err;\n  }\n};\n","import { FUEL_NETWORK_URL } from '@fuel-ts/account/configs';\nimport { defaultConsensusKey } from '@fuel-ts/utils';\nimport { tryFindBinaries } from '@fuel-ts/utils/cli-utils';\nimport { bundleRequire } from 'bundle-require';\nimport type { BuildOptions } from 'esbuild';\nimport JoyCon from 'joycon';\nimport { resolve, parse } from 'path';\n\nimport type { FuelsConfig, UserFuelsConfig } from '../types';\n\nimport { SwayType, readForcToml, readSwayType } from './forcUtils';\nimport { validateConfig } from './validateConfig';\n\nexport async function loadUserConfig(\n  cwd: string\n): Promise<{ userConfig: UserFuelsConfig; configPath: string }> {\n  const configJoycon = new JoyCon();\n\n  const configPath = await configJoycon.resolve({\n    files: ['ts', 'js', 'cjs', 'mjs'].map((e) => `fuels.config.${e}`),\n    cwd,\n    stopDir: parse(cwd).root,\n  });\n\n  if (!configPath) {\n    throw new Error('Config file not found!');\n  }\n\n  const esbuildOptions: BuildOptions = {\n    target: 'ES2021',\n    platform: 'node',\n    format: 'esm',\n  };\n\n  const result = await bundleRequire({\n    filepath: configPath,\n    esbuildOptions,\n    cwd,\n  });\n\n  const userConfig: UserFuelsConfig = result.mod.default;\n  return { configPath, userConfig };\n}\n\nexport async function loadConfig(cwd: string): Promise<FuelsConfig> {\n  const { configPath, userConfig } = await loadUserConfig(cwd);\n  await validateConfig(userConfig);\n\n  const { forcBuildFlags = [] } = userConfig;\n  const releaseFlag = forcBuildFlags.find((f) => f === '--release');\n  const buildMode = releaseFlag ? 'release' : 'debug';\n\n  const { forcPath, fuelCorePath } = tryFindBinaries({\n    forcPath: userConfig.forcPath,\n    fuelCorePath: userConfig.fuelCorePath,\n  });\n\n  // Start clone-object while initializing optional props\n  const config: FuelsConfig = {\n    contracts: [],\n    scripts: [],\n    predicates: [],\n    deployConfig: {},\n    autoStartFuelCore: true,\n    fuelCorePort: 4000,\n    providerUrl: FUEL_NETWORK_URL,\n    privateKey: defaultConsensusKey,\n    ...userConfig,\n    basePath: cwd,\n    forcPath,\n    fuelCorePath,\n    configPath,\n    forcBuildFlags,\n    buildMode,\n  };\n\n  // Resolve the output path on loaded config\n  config.output = resolve(cwd, config.output);\n\n  // Initialize optional variables\n  config.autoStartFuelCore = userConfig.autoStartFuelCore ?? true;\n\n  if (!userConfig.workspace) {\n    // Resolve members individually\n    const { contracts, predicates, scripts } = userConfig;\n    config.contracts = (contracts || []).map((c: string) => resolve(cwd, c));\n    config.scripts = (scripts || []).map((s: string) => resolve(cwd, s));\n    config.predicates = (predicates || []).map((p: string) => resolve(cwd, p));\n  } else {\n    // Resolve members via workspace\n    const workspace = resolve(cwd, userConfig.workspace);\n    const forcToml = readForcToml(workspace);\n\n    if (!forcToml.workspace) {\n      const workspaceMsg = `Forc workspace not detected in:\\n  ${workspace}/Forc.toml`;\n\n      const swayProgramType = readSwayType(workspace);\n      const exampleMsg = `Try using '${swayProgramType}s' instead of 'workspace' in:\\n  ${configPath}`;\n\n      throw new Error([workspaceMsg, exampleMsg].join('\\n\\n'));\n    }\n\n    const swayMembers = forcToml.workspace.members.map((member) => resolve(workspace, member));\n\n    swayMembers\n      .map((path) => ({ path, type: readSwayType(path) }))\n      .filter(({ type }) => type !== SwayType.library)\n      .forEach(({ path, type }) => config[`${type as Exclude<SwayType, 'library'>}s`].push(path));\n\n    config.workspace = workspace;\n  }\n\n  return config;\n}\n","import * as yup from 'yup';\n\nimport type { UserFuelsConfig } from '../types';\n\nconst schema = yup\n  .object({\n    workspace: yup.string(),\n    contracts: yup.array(yup.string()),\n    scripts: yup.array(yup.string()),\n    predicates: yup.array(yup.string()),\n    output: yup.string().required('config.output should be a valid string'),\n  })\n  .required();\n\nexport async function validateConfig(config: UserFuelsConfig) {\n  return schema.validate(config);\n}\n","import { capitalizeString } from '@fuel-ts/utils';\nimport type { Command } from 'commander';\n\nimport { loadConfig } from '../config/loadConfig';\nimport type { Commands, FuelsConfig, CommandEvent } from '../types';\nimport { error, log } from '../utils/logger';\n\nexport const withConfigErrorHandler = async (err: Error, config?: FuelsConfig) => {\n  error(err.message);\n  if (config) {\n    await config.onFailure?.(<Error>err, config);\n  }\n};\n\nexport function withConfig<CType extends Commands>(\n  program: Command,\n  command: CType,\n  fn: (\n    config: FuelsConfig,\n    options?: Command\n  ) => Promise<Extract<CommandEvent, { type: CType }>['data']>\n) {\n  return async () => {\n    const options = program.opts();\n\n    let config: FuelsConfig;\n\n    try {\n      config = await loadConfig(options.path);\n    } catch (err) {\n      await withConfigErrorHandler(<Error>err);\n      return;\n    }\n\n    try {\n      const eventData = await fn(config, program);\n      config.onSuccess?.(\n        {\n          type: command,\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          data: eventData as any,\n        },\n        config\n      );\n      log(`🎉  ${capitalizeString(command)} completed successfully!`);\n    } catch (err: unknown) {\n      await withConfigErrorHandler(<Error>err, config);\n    }\n  };\n}\n","import { type Command } from 'commander';\nimport { existsSync, writeFileSync } from 'fs';\nimport { globSync } from 'glob';\nimport { join, relative, resolve } from 'path';\n\nimport { renderFuelsConfigTemplate } from '../../templates/fuels.config';\nimport { log } from '../../utils/logger';\n\nexport function init(program: Command) {\n  const options = program.opts();\n\n  const { path, autoStartFuelCore, forcPath, fuelCorePath } = options;\n\n  let workspace: string | undefined;\n  let absoluteWorkspace: string | undefined;\n\n  if (options.workspace) {\n    absoluteWorkspace = resolve(path, options.workspace);\n    workspace = `./${relative(path, absoluteWorkspace)}`;\n  }\n\n  const absoluteOutput = resolve(path, options.output);\n  const output = `./${relative(path, absoluteOutput)}`;\n\n  const [contracts, scripts, predicates] = ['contracts', 'scripts', 'predicates'].map(\n    (optionName) => {\n      const pathOrGlob: string = options[optionName];\n      if (!pathOrGlob) {\n        return undefined;\n      }\n      const expanded = globSync(pathOrGlob, { cwd: path });\n      const relatives = expanded.map((e) => relative(path, e));\n      return relatives;\n    }\n  );\n\n  const noneIsInformed = ![workspace, contracts, scripts, predicates].find((v) => v !== undefined);\n\n  if (noneIsInformed) {\n    // mimicking commander property validation\n    process.stdout.write(`error: required option '-w, --workspace <path>' not specified\\r`);\n    process.exit(1);\n  } else {\n    const fuelsConfigPath = join(path, 'fuels.config.ts');\n\n    if (existsSync(fuelsConfigPath)) {\n      throw new Error(`Config file exists, aborting.\\n  ${fuelsConfigPath}`);\n    }\n\n    const renderedConfig = renderFuelsConfigTemplate({\n      workspace,\n      contracts,\n      scripts,\n      predicates,\n      output,\n      forcPath,\n      fuelCorePath,\n      autoStartFuelCore,\n    });\n\n    writeFileSync(fuelsConfigPath, renderedConfig);\n\n    log(`Config file created at:\\n\\n ${fuelsConfigPath}\\n`);\n  }\n}\n","/* eslint-disable @typescript-eslint/triple-slash-reference */\n/// <reference path=\"../../hbs.d.ts\" />\n\nimport Handlebars from 'handlebars';\n\nimport fuelsConfigTemplate from './fuels.config.hbs';\n\nHandlebars.registerHelper('isDefined', (v) => v !== undefined);\n\nexport function renderFuelsConfigTemplate(props: {\n  workspace?: string;\n  contracts?: string[];\n  scripts?: string[];\n  predicates?: string[];\n  output: string;\n  forcPath?: string;\n  fuelCorePath?: string;\n  autoStartFuelCore?: boolean;\n}) {\n  const renderTemplate = Handlebars.compile(fuelsConfigTemplate, {\n    strict: true,\n    noEscape: true,\n  });\n\n  return renderTemplate(props);\n}\n","import { watch, type FSWatcher } from 'chokidar';\n\nimport { loadConfig } from '../../config/loadConfig';\nimport type { FuelsConfig } from '../../types';\nimport { error, log } from '../../utils/logger';\nimport type { FuelCoreNode } from '../dev/autoStartFuelCore';\nimport { autoStartFuelCore } from '../dev/autoStartFuelCore';\nimport { withConfigErrorHandler } from '../withConfig';\n\nexport type NodeState = {\n  config: FuelsConfig;\n  watchHandlers: FSWatcher[];\n  fuelCore?: FuelCoreNode;\n};\n\nexport const getConfigFilepathsToWatch = (config: FuelsConfig) => {\n  const configFilePathsToWatch: string[] = [config.configPath];\n  if (config.snapshotDir) {\n    configFilePathsToWatch.push(config.snapshotDir);\n  }\n  return configFilePathsToWatch;\n};\n\nexport const closeAllFileHandlers = (handlers: FSWatcher[]) => {\n  handlers.forEach((h) => h.close());\n};\n\nexport const configFileChanged = (state: NodeState) => async (_event: string, path: string) => {\n  log(`\\nFile changed: ${path}`);\n\n  closeAllFileHandlers(state.watchHandlers);\n  state.fuelCore?.killChildProcess();\n\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    await node(await loadConfig(state.config.basePath));\n  } catch (err: unknown) {\n    await withConfigErrorHandler(<Error>err, state.config);\n  }\n};\n\nexport const node = async (config: FuelsConfig) => {\n  const fuelCore = await autoStartFuelCore(config);\n\n  const configFilePaths = getConfigFilepathsToWatch(config);\n\n  try {\n    const watchHandlers: FSWatcher[] = [];\n    const options = { persistent: true, ignoreInitial: true, ignored: '**/out/**' };\n    const state = { config, watchHandlers, fuelCore };\n\n    // watch: fuels.config.ts and snapshotDir\n    watchHandlers.push(watch(configFilePaths, options).on('all', configFileChanged(state)));\n  } catch (err: unknown) {\n    error(err);\n    throw err;\n  }\n};\n","import type { Command } from 'commander';\n\nimport { loadUserConfig } from '../config/loadConfig';\nimport type { Commands, UserFuelsConfig } from '../types';\nimport { debug, error } from '../utils/logger';\n\ntype BinaryPaths = Pick<UserFuelsConfig, 'forcPath' | 'fuelCorePath'>;\n\nexport function withBinaryPaths<CType extends Commands>(\n  program: Command,\n  _command: CType,\n  fn: (paths: BinaryPaths) => void\n) {\n  return async () => {\n    const options = program.opts();\n\n    const paths: BinaryPaths = {};\n\n    try {\n      const { userConfig } = await loadUserConfig(options.path);\n      paths.forcPath = userConfig.forcPath;\n      paths.fuelCorePath = userConfig.fuelCorePath;\n    } catch (err) {\n      debug((<Error>err).message);\n    }\n\n    try {\n      await fn(paths);\n    } catch (err) {\n      error(err);\n    }\n  };\n}\n","import type { Command } from 'commander';\n\nimport type { Commands } from '../types';\nimport { error } from '../utils/logger';\n\nexport function withProgram<CType extends Commands>(\n  program: Command,\n  _command: CType,\n  fn: (program: Command) => void\n) {\n  return async () => {\n    try {\n      await fn(program);\n    } catch (err) {\n      error(err);\n    }\n  };\n}\n"],"mappings":"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","names":["import_cli","chalk","SwayType","toml","camelCase","error","import_fs","import_path","resolve","import_fs","import_path","Handlebars","import_utils","import_path","JoyCon","import_utils","import_fs","import_glob","import_path","import_handlebars","Handlebars","autoStartFuelCore","import_chokidar","getConfigFilepathsToWatch","closeAllFileHandlers","configFileChanged","configureTypegenCliOptions"]}