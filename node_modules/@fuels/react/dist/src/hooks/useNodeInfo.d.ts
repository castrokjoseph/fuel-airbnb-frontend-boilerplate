type NodeInfoParams = {
    version?: string;
};
export declare const useNodeInfo: ({ version }?: NodeInfoParams) => {
    error: Error | null;
    isError: boolean;
    isPending: boolean;
    isLoading: boolean;
    isLoadingError: boolean;
    isRefetchError: boolean;
    isSuccess: boolean;
    status: "error" | "success" | "pending";
    dataUpdatedAt: number;
    errorUpdatedAt: number;
    failureCount: number;
    failureReason: Error | null;
    errorUpdateCount: number;
    isFetched: boolean;
    isFetchedAfterMount: boolean;
    isFetching: boolean;
    isInitialLoading: boolean;
    isPaused: boolean;
    isPlaceholderData: boolean;
    isRefetching: boolean;
    isStale: boolean;
    refetch: (options?: import("@tanstack/react-query").RefetchOptions | undefined) => Promise<import("@tanstack/react-query").QueryObserverResult<import("fuels").NodeInfo | undefined, Error>>;
    fetchStatus: import("@tanstack/react-query").FetchStatus;
} & {
    nodeInfo: import("fuels").NodeInfo | undefined;
} & {
    isCompatible: boolean;
};
export {};
