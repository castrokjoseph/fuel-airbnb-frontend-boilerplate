import type { Asset } from 'fuels';
export declare const useAddAssets: () => {
    data: undefined;
    variables: undefined;
    error: null;
    isError: false;
    isIdle: true;
    isPending: false;
    isSuccess: false;
    status: "idle";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    addAssets: (assets: Asset | Asset[]) => void;
    addAssetsAsync: (assets: Asset | Asset[]) => Promise<boolean>;
} | {
    data: undefined;
    variables: Asset | Asset[];
    error: null;
    isError: false;
    isIdle: false;
    isPending: true;
    isSuccess: false;
    status: "pending";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    addAssets: (assets: Asset | Asset[]) => void;
    addAssetsAsync: (assets: Asset | Asset[]) => Promise<boolean>;
} | {
    data: undefined;
    error: Error;
    variables: Asset | Asset[];
    isError: true;
    isIdle: false;
    isPending: false;
    isSuccess: false;
    status: "error";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    addAssets: (assets: Asset | Asset[]) => void;
    addAssetsAsync: (assets: Asset | Asset[]) => Promise<boolean>;
} | {
    data: boolean;
    error: null;
    variables: Asset | Asset[];
    isError: false;
    isIdle: false;
    isPending: false;
    isSuccess: true;
    status: "success";
    reset: () => void;
    context: unknown;
    failureCount: number;
    failureReason: Error | null;
    isPaused: boolean;
    submittedAt: number;
    addAssets: (assets: Asset | Asset[]) => void;
    addAssetsAsync: (assets: Asset | Asset[]) => Promise<boolean>;
};
