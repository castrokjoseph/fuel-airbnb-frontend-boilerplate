import type { DefaultError, DefinedInitialDataOptions, DefinedUseQueryResult, QueryClient, QueryKey, UndefinedInitialDataOptions, UseQueryResult } from '@tanstack/react-query';
type ExcludeData<T> = Omit<T, 'data'>;
type NamedUseQueryResult<TName extends string, TQueryFnData = unknown, TError = DefaultError> = ExcludeData<UseQueryResult<TQueryFnData, TError>> & {
    [key in TName]: UseQueryResult<TQueryFnData, TError>['data'];
};
type DefinedNamedUseQueryResult<TName extends string, TQueryFnData = unknown, TError = DefaultError> = ExcludeData<DefinedUseQueryResult<TQueryFnData, TError>> & {
    [key in TName]: DefinedUseQueryResult<TQueryFnData, TError>['data'];
};
/**
 * When initialData is not provided "data" will be always TQueryFnData | undefined.
 * It might need some type checking to be sure that the data is not undefined.
 */
export declare function useNamedQuery<TName extends string, TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(name: TName, options: UndefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>, queryClient?: QueryClient): NamedUseQueryResult<TName, TData, TError>;
/**
 * When initialData is provided "data" will be always TQueryFnData.
 * Never undefined.
 */
export declare function useNamedQuery<TName extends string, TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(name: TName, options: DefinedInitialDataOptions<TQueryFnData, TError, TData, TQueryKey>, queryClient?: QueryClient): DefinedNamedUseQueryResult<TName, TData, TError>;
export {};
