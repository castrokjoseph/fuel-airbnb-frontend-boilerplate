import { type AbiMap, type Asset, type ConnectorMetadata, FuelConnector, FuelConnectorEventTypes, type JsonAbi, type Network, type TransactionRequestLike, type Version } from 'fuels';
import type { BurnerWalletConfig } from './types';
export declare class BurnerWalletConnector extends FuelConnector {
    static defaultProviderUrl: string;
    name: string;
    connected: boolean;
    installed: boolean;
    events: typeof FuelConnectorEventTypes;
    metadata: ConnectorMetadata;
    private burnerWallet;
    private burnerWalletProvider;
    private storage;
    constructor(config?: BurnerWalletConfig);
    private getProvider;
    private generatePrivateKey;
    private setupBurnerWallet;
    private getStorage;
    /**
     * ============================================================
     * Connector methods
     * ============================================================
     */
    ping(): Promise<boolean>;
    version(): Promise<Version>;
    isConnected(): Promise<boolean>;
    connect(): Promise<boolean>;
    accounts(): Promise<string[]>;
    disconnect(): Promise<boolean>;
    signMessage(address: string, message: string): Promise<string>;
    sendTransaction(_address: string, transaction: TransactionRequestLike): Promise<string>;
    currentAccount(): Promise<string | null>;
    addAssets(_assets: Asset[]): Promise<boolean>;
    addAsset(_asset: Asset): Promise<boolean>;
    assets(): Promise<Array<Asset>>;
    addNetwork(_networkUrl: string): Promise<boolean>;
    selectNetwork(_network: Network): Promise<boolean>;
    networks(): Promise<Network[]>;
    currentNetwork(): Promise<Network>;
    addAbi(_abiMap: AbiMap): Promise<boolean>;
    getAbi(_contractId: string): Promise<JsonAbi>;
    hasAbi(_contractId: string): Promise<boolean>;
}
