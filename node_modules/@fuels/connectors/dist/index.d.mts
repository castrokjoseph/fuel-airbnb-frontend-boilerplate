import { FuelConnector, FuelConnectorEventTypes, ConnectorMetadata, TransactionRequestLike, Asset, FuelABI, Network, Version, Provider, StorageAbstract, AbiMap, JsonAbi } from 'fuels';
import { JSONRPCClient, JSONRPCRequest, JSONRPCResponse } from 'json-rpc-2.0';

type DefaultConnectors = {
    devMode?: boolean;
};
declare function defaultConnectors({ devMode, }?: DefaultConnectors): Array<FuelConnector>;

declare const CONNECTOR_SCRIPT = "FuelConnectorScript";
declare const CONTENT_SCRIPT_NAME = "FuelContentScript";
declare const EVENT_MESSAGE = "message";

declare class FuelWalletConnector extends FuelConnector {
    name: string;
    connected: boolean;
    installed: boolean;
    events: typeof FuelConnectorEventTypes;
    metadata: ConnectorMetadata;
    readonly client: JSONRPCClient;
    constructor(name?: string);
    /**
     * ============================================================
     * Application communication methods
     * ============================================================
     */
    private setupConnector;
    private acceptMessage;
    private setupListener;
    private createRequestId;
    private postMessage;
    private sendRequest;
    private onResponse;
    private onEvent;
    private onMessage;
    private onCommunicationMessage;
    /**
     * ============================================================
     * Connector methods
     * ============================================================
     */
    ping(): Promise<boolean>;
    isConnected(): Promise<boolean>;
    connect(): Promise<boolean>;
    disconnect(): Promise<boolean>;
    accounts(): Promise<Array<string>>;
    currentAccount(): Promise<string | null>;
    signMessage(address: string, message: string): Promise<string>;
    sendTransaction(address: string, transaction: TransactionRequestLike): Promise<string>;
    assets(): Promise<Array<Asset>>;
    addAsset(asset: Asset): Promise<boolean>;
    addAssets(assets: Asset[]): Promise<boolean>;
    addABI(contractId: string, abi: FuelABI): Promise<boolean>;
    getABI(contractId: string): Promise<FuelABI>;
    hasABI(contractId: string): Promise<boolean>;
    currentNetwork(): Promise<Network>;
    selectNetwork(_network: Network): Promise<boolean>;
    networks(): Promise<Network[]>;
    addNetwork(networkUrl: string): Promise<boolean>;
    version(): Promise<Version>;
}

declare enum MessageTypes {
    ping = "ping",
    uiEvent = "uiEvent",
    event = "event",
    request = "request",
    response = "response",
    removeConnection = "removeConnection"
}
interface MessageSender {
    id?: string | undefined;
    origin?: string | undefined;
    tab?: {
        id?: number | undefined;
        index?: number | undefined;
        windowId?: number | undefined;
        url?: string | undefined;
        title?: string | undefined;
        favIconUrl?: string | undefined;
    };
}
type BaseEvent<T> = {
    readonly target: string;
    readonly connectorName?: string;
    readonly id?: string;
    readonly sender?: MessageSender;
} & T;
type EventMessageEvents = Array<{
    event: string;
    params: Array<unknown>;
}>;
type UIEventMessage = BaseEvent<{
    readonly type: MessageTypes.uiEvent;
    readonly ready: boolean;
    readonly session: string;
}>;
type RequestMessage = BaseEvent<{
    readonly type: MessageTypes.request;
    readonly request: JSONRPCRequest;
}>;
type ResponseMessage = BaseEvent<{
    readonly type: MessageTypes.response;
    readonly response: JSONRPCResponse;
}>;
type EventMessage<T = EventMessageEvents> = BaseEvent<{
    readonly type: MessageTypes.event;
    readonly events: T;
}>;
type CommunicationMessage = UIEventMessage | RequestMessage | ResponseMessage | EventMessage;

declare class FuelWalletDevelopmentConnector extends FuelWalletConnector {
    metadata: ConnectorMetadata;
    constructor();
}

declare class FueletWalletConnector extends FuelWalletConnector {
    name: string;
    metadata: ConnectorMetadata;
    constructor();
}

type BurnerWalletConfig = {
    fuelProvider?: Provider | Promise<Provider>;
    storage?: StorageAbstract;
};

declare class BurnerWalletConnector extends FuelConnector {
    static defaultProviderUrl: string;
    name: string;
    connected: boolean;
    installed: boolean;
    events: typeof FuelConnectorEventTypes;
    metadata: ConnectorMetadata;
    private burnerWallet;
    private burnerWalletProvider;
    private storage;
    constructor(config?: BurnerWalletConfig);
    private getProvider;
    private generatePrivateKey;
    private setupBurnerWallet;
    private getStorage;
    /**
     * ============================================================
     * Connector methods
     * ============================================================
     */
    ping(): Promise<boolean>;
    version(): Promise<Version>;
    isConnected(): Promise<boolean>;
    connect(): Promise<boolean>;
    accounts(): Promise<string[]>;
    disconnect(): Promise<boolean>;
    signMessage(address: string, message: string): Promise<string>;
    sendTransaction(_address: string, transaction: TransactionRequestLike): Promise<string>;
    currentAccount(): Promise<string | null>;
    addAssets(_assets: Asset[]): Promise<boolean>;
    addAsset(_asset: Asset): Promise<boolean>;
    assets(): Promise<Array<Asset>>;
    addNetwork(_networkUrl: string): Promise<boolean>;
    selectNetwork(_network: Network): Promise<boolean>;
    networks(): Promise<Network[]>;
    currentNetwork(): Promise<Network>;
    addAbi(_abiMap: AbiMap): Promise<boolean>;
    getAbi(_contractId: string): Promise<JsonAbi>;
    hasAbi(_contractId: string): Promise<boolean>;
}

export { BurnerWalletConnector, CONNECTOR_SCRIPT, CONTENT_SCRIPT_NAME, type CommunicationMessage, EVENT_MESSAGE, type EventMessage, type EventMessageEvents, FuelWalletConnector, FuelWalletDevelopmentConnector, FueletWalletConnector, type MessageSender, MessageTypes, type RequestMessage, type ResponseMessage, type UIEventMessage, defaultConnectors };
