import { Provider, FuelConnector, ConnectorMetadata, FuelConnectorEventTypes, Version, TransactionRequestLike, Asset, Network, AbiMap, JsonAbi } from 'fuels';
import EventEmitter from 'node:events';

interface EIP1193Provider extends EventEmitter {
    request(args: {
        method: string;
        params?: any[];
    }): Promise<any>;
}

type EVMWalletConnectorConfig = {
    fuelProvider?: Provider | Promise<Provider>;
    ethProvider?: EIP1193Provider;
};
declare enum EVMWalletConnectorEvents {
    ACCOUNTS_CHANGED = "accountsChanged",
    CONNECT = "connect",
    DISCONNECT = "disconnect"
}

declare class EVMWalletConnector extends FuelConnector {
    name: string;
    metadata: ConnectorMetadata;
    installed: boolean;
    connected: boolean;
    ethProvider: EIP1193Provider | null;
    fuelProvider: Provider | null;
    events: {
        ACCOUNTS_CHANGED: EVMWalletConnectorEvents.ACCOUNTS_CHANGED;
        CONNECT: EVMWalletConnectorEvents.CONNECT;
        DISCONNECT: EVMWalletConnectorEvents.DISCONNECT;
        connectors: FuelConnectorEventTypes.connectors;
        currentConnector: FuelConnectorEventTypes.currentConnector;
        connection: FuelConnectorEventTypes.connection;
        accounts: FuelConnectorEventTypes.accounts;
        currentAccount: FuelConnectorEventTypes.currentAccount;
        networks: FuelConnectorEventTypes.networks;
        currentNetwork: FuelConnectorEventTypes.currentNetwork;
        assets: FuelConnectorEventTypes.assets;
        abis: FuelConnectorEventTypes.abis;
    };
    private predicateAccount;
    private predicate;
    private setupLock;
    private _currentAccount;
    private config;
    private _ethereumEvents;
    constructor(config?: EVMWalletConnectorConfig);
    configProviders(config?: EVMWalletConnectorConfig): Promise<void>;
    setupEthereumEvents(): void;
    getLazyEthereum(): Promise<EIP1193Provider | null>;
    /**
     * ============================================================
     * Application communication methods
     * ============================================================
     */
    getProviders(): Promise<{
        fuelProvider: Provider;
        ethProvider: EIP1193Provider;
    }>;
    setup(): Promise<void>;
    setupEventBridge(): Promise<void>;
    setupCurrentAccount(): Promise<void>;
    /**
     * ============================================================
     * Connector methods
     * ============================================================
     */
    ping(): Promise<boolean>;
    version(): Promise<Version>;
    isConnected(): Promise<boolean>;
    accounts(): Promise<Array<string>>;
    connect(): Promise<boolean>;
    disconnect(): Promise<boolean>;
    signMessage(_address: string, _message: string): Promise<string>;
    sendTransaction(address: string, transaction: TransactionRequestLike): Promise<string>;
    currentAccount(): Promise<string | null>;
    addAssets(_assets: Asset[]): Promise<boolean>;
    addAsset(_asset: Asset): Promise<boolean>;
    assets(): Promise<Array<Asset>>;
    addNetwork(_networkUrl: string): Promise<boolean>;
    selectNetwork(_network: Network): Promise<boolean>;
    networks(): Promise<Network[]>;
    currentNetwork(): Promise<Network>;
    addAbi(_abiMap: AbiMap): Promise<boolean>;
    getAbi(_contractId: string): Promise<JsonAbi>;
    hasAbi(_contractId: string): Promise<boolean>;
}

export { EVMWalletConnector };
