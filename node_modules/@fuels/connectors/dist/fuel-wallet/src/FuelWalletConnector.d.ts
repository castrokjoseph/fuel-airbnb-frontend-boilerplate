import { type Asset, type ConnectorMetadata, type FuelABI, FuelConnector, FuelConnectorEventTypes, type Network, type TransactionRequestLike, type Version } from 'fuels';
import { JSONRPCClient } from 'json-rpc-2.0';
export declare class FuelWalletConnector extends FuelConnector {
    name: string;
    connected: boolean;
    installed: boolean;
    events: typeof FuelConnectorEventTypes;
    metadata: ConnectorMetadata;
    readonly client: JSONRPCClient;
    constructor(name?: string);
    /**
     * ============================================================
     * Application communication methods
     * ============================================================
     */
    private setupConnector;
    private acceptMessage;
    private setupListener;
    private createRequestId;
    private postMessage;
    private sendRequest;
    private onResponse;
    private onEvent;
    private onMessage;
    private onCommunicationMessage;
    /**
     * ============================================================
     * Connector methods
     * ============================================================
     */
    ping(): Promise<boolean>;
    isConnected(): Promise<boolean>;
    connect(): Promise<boolean>;
    disconnect(): Promise<boolean>;
    accounts(): Promise<Array<string>>;
    currentAccount(): Promise<string | null>;
    signMessage(address: string, message: string): Promise<string>;
    sendTransaction(address: string, transaction: TransactionRequestLike): Promise<string>;
    assets(): Promise<Array<Asset>>;
    addAsset(asset: Asset): Promise<boolean>;
    addAssets(assets: Asset[]): Promise<boolean>;
    addABI(contractId: string, abi: FuelABI): Promise<boolean>;
    getABI(contractId: string): Promise<FuelABI>;
    hasABI(contractId: string): Promise<boolean>;
    currentNetwork(): Promise<Network>;
    selectNetwork(_network: Network): Promise<boolean>;
    networks(): Promise<Network[]>;
    addNetwork(networkUrl: string): Promise<boolean>;
    version(): Promise<Version>;
}
