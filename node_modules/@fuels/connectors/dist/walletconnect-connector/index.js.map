{"version":3,"sources":["../../src/walletconnect-connector/index.ts","../../../walletconnect-connector/src/index.ts","../../../walletconnect-connector/src/WalletConnectConnector.ts","../../../walletconnect-connector/src/constants.ts","../../../walletconnect-connector/src/generated/predicate.ts","../../../walletconnect-connector/src/utils/Predicate.ts","../../../walletconnect-connector/src/utils/wagmiConfig.ts","../../../walletconnect-connector/src/types.ts"],"names":["memoize"],"mappings":"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","sourcesContent":["export * from '@fuel-connectors/walletconnect-connector';\n","export * from './WalletConnectConnector';\nexport * from './types';\n","import { hexToBytes } from '@ethereumjs/util';\nimport { hexlify, splitSignature } from '@ethersproject/bytes';\nimport {\n  type Config,\n  disconnect,\n  getAccount,\n  reconnect,\n  watchAccount,\n} from '@wagmi/core';\nimport type { Web3Modal } from '@web3modal/wagmi';\nimport {\n  type AbiMap,\n  type Asset,\n  type ConnectorMetadata,\n  FuelConnector,\n  FuelConnectorEventTypes,\n  Provider as FuelProvider,\n  type JsonAbi,\n  type Network,\n  type TransactionRequestLike,\n  type Version,\n  transactionRequestify,\n} from 'fuels';\nimport { ETHEREUM_ICON, TESTNET_URL } from './constants';\nimport { predicates } from './generated/predicate';\nimport type { WalletConnectConfig } from './types';\nimport { PredicateAccount } from './utils/Predicate';\nimport { createModalConfig } from './utils/wagmiConfig';\n\nexport class WalletConnectConnector extends FuelConnector {\n  name = 'Ethereum Wallets';\n\n  connected = false;\n  installed = false;\n\n  events = FuelConnectorEventTypes;\n\n  metadata: ConnectorMetadata = {\n    image: ETHEREUM_ICON,\n    install: {\n      action: 'Install',\n      description: 'Install Ethereum Wallet to connect to Fuel',\n      link: 'https://ethereum.org/en/wallets/find-wallet/',\n    },\n  };\n\n  wagmiConfig: Config;\n  ethProvider: unknown | null = null;\n  fuelProvider: FuelProvider | null = null;\n  web3Modal: Web3Modal;\n\n  private predicateAccount: PredicateAccount;\n  private config: WalletConnectConfig = {};\n\n  private _unsubs: Array<() => void> = [];\n\n  constructor(config: WalletConnectConfig = {}) {\n    super();\n\n    this.predicateAccount = new PredicateAccount(\n      config.predicateConfig ?? predicates['verification-predicate'],\n    );\n\n    const { wagmiConfig, web3Modal } = createModalConfig(config);\n    this.wagmiConfig = wagmiConfig;\n    this.web3Modal = web3Modal;\n\n    this.configProviders(config);\n    this.setupWatchers();\n  }\n\n  async configProviders(config: WalletConnectConfig = {}) {\n    this.config = Object.assign(config, {\n      fuelProvider: config.fuelProvider || FuelProvider.create(TESTNET_URL),\n    });\n  }\n\n  /**\n   * ============================================================\n   * Application communication methods\n   * ============================================================\n   */\n  evmAccounts(): Array<string> {\n    const accounts = getAccount(this.wagmiConfig).addresses;\n    return accounts as Array<string>;\n  }\n\n  setupWatchers() {\n    this._unsubs.push(\n      watchAccount(this.wagmiConfig, {\n        onChange: async (account) => {\n          switch (account.status) {\n            case 'connected': {\n              this.emit(this.events.connection, true);\n              this.emit(\n                this.events.currentAccount,\n                await this.predicateAccount.getPredicateAddress(\n                  account.address,\n                ),\n              );\n              this.emit(\n                this.events.accounts,\n                await this.predicateAccount.getPredicateAccounts(\n                  this.evmAccounts(),\n                ),\n              );\n              break;\n            }\n            case 'disconnected': {\n              this.emit(this.events.connection, false);\n              this.emit(this.events.currentAccount, null);\n              this.emit(this.events.accounts, []);\n              break;\n            }\n          }\n        },\n      }),\n    );\n  }\n\n  destroy() {\n    this._unsubs.forEach((unsub) => unsub());\n  }\n\n  async getProviders() {\n    if (!this.fuelProvider) {\n      this.fuelProvider = (await this.config.fuelProvider) ?? null;\n\n      if (!this.fuelProvider) {\n        throw new Error('Fuel provider not found');\n      }\n    }\n\n    return {\n      fuelProvider: this.fuelProvider,\n    };\n  }\n\n  /**\n   * ============================================================\n   * Connector methods\n   * ============================================================\n   */\n  async ping(): Promise<boolean> {\n    await this.configProviders();\n    return true;\n  }\n\n  async version(): Promise<Version> {\n    return { app: '0.0.0', network: '0.0.0' };\n  }\n\n  async requireConnection() {\n    const { state } = this.wagmiConfig;\n    if (state.status === 'disconnected' && state.connections.size > 0) {\n      await reconnect(this.wagmiConfig);\n    }\n  }\n\n  async isConnected(): Promise<boolean> {\n    await this.requireConnection();\n    const account = getAccount(this.wagmiConfig);\n    return account.isConnected || false;\n  }\n\n  async connect(): Promise<boolean> {\n    return new Promise((resolve) => {\n      this.web3Modal.open();\n      const unsub = this.web3Modal.subscribeEvents(async (event) => {\n        switch (event.data.event) {\n          case 'CONNECT_SUCCESS': {\n            resolve(true);\n            unsub();\n            break;\n          }\n          case 'MODAL_CLOSE':\n          case 'CONNECT_ERROR': {\n            resolve(false);\n            unsub();\n            break;\n          }\n        }\n      });\n    });\n  }\n\n  async disconnect(): Promise<boolean> {\n    const { connector } = getAccount(this.wagmiConfig);\n    await disconnect(this.wagmiConfig, {\n      connector,\n    });\n    return this.isConnected();\n  }\n\n  async accounts(): Promise<Array<string>> {\n    await this.requireConnection();\n\n    return this.predicateAccount.getPredicateAccounts(this.evmAccounts());\n  }\n\n  async signMessage(_address: string, _message: string): Promise<string> {\n    throw new Error('A predicate account cannot sign messages');\n  }\n\n  async sendTransaction(\n    address: string,\n    transaction: TransactionRequestLike,\n  ): Promise<string> {\n    if (!(await this.isConnected())) {\n      throw Error('No connected accounts');\n    }\n\n    const { fuelProvider } = await this.getProviders();\n    const chainId = fuelProvider.getChainId();\n    const evmAccount = await this.predicateAccount.getEVMAddress(\n      address,\n      this.evmAccounts(),\n    );\n    if (!evmAccount) {\n      throw Error(`No account found for ${address}`);\n    }\n    const transactionRequest = transactionRequestify(transaction);\n\n    // Create a predicate and set the witness index to call in predicate`\n    const predicate = this.predicateAccount.createPredicate(\n      evmAccount,\n      fuelProvider,\n      [transactionRequest.witnesses.length - 1],\n    );\n    predicate.connect(fuelProvider);\n\n    // Attach missing inputs (including estimated predicate gas usage) / outputs to the request\n    await predicate.provider.estimateTxDependencies(transactionRequest);\n\n    // To each input of the request, attach the predicate and its data\n    const requestWithPredicateAttached =\n      predicate.populateTransactionPredicateData(transactionRequest);\n\n    requestWithPredicateAttached.inputs.forEach((input) => {\n      if ('predicate' in input && input.predicate) {\n        input.witnessIndex = 0;\n      }\n    });\n\n    const txID = requestWithPredicateAttached.getTransactionId(chainId);\n    // biome-ignore lint/suspicious/noExplicitAny: <explanation>\n    const provider: any = await getAccount(\n      this.wagmiConfig,\n    ).connector?.getProvider();\n    const signature = await provider.request({\n      method: 'personal_sign',\n      params: [txID, evmAccount],\n    });\n\n    // Transform the signature into compact form for Sway to understand\n    const compactSignature = splitSignature(hexToBytes(signature)).compact;\n    transactionRequest.witnesses.push(compactSignature);\n\n    const transactionWithPredicateEstimated =\n      await fuelProvider.estimatePredicates(requestWithPredicateAttached);\n\n    const response = await fuelProvider.operations.submit({\n      encodedTransaction: hexlify(\n        transactionWithPredicateEstimated.toTransactionBytes(),\n      ),\n    });\n\n    return response.submit.id;\n  }\n\n  async currentAccount(): Promise<string | null> {\n    if (!(await this.isConnected())) {\n      throw Error('No connected accounts');\n    }\n    return getAccount(this.wagmiConfig).address || null;\n  }\n\n  async addAssets(_assets: Asset[]): Promise<boolean> {\n    throw new Error('Method not implemented.');\n  }\n\n  async addAsset(_asset: Asset): Promise<boolean> {\n    throw new Error('Method not implemented.');\n  }\n\n  async assets(): Promise<Array<Asset>> {\n    return [];\n  }\n\n  async addNetwork(_networkUrl: string): Promise<boolean> {\n    throw new Error('Method not implemented.');\n  }\n\n  async selectNetwork(_network: Network): Promise<boolean> {\n    throw new Error('Method not implemented.');\n  }\n\n  async networks(): Promise<Network[]> {\n    return [await this.currentNetwork()];\n  }\n\n  async currentNetwork(): Promise<Network> {\n    const { fuelProvider } = await this.getProviders();\n    const chainId = fuelProvider.getChainId();\n\n    return { url: fuelProvider.url, chainId: chainId };\n  }\n\n  async addAbi(_abiMap: AbiMap): Promise<boolean> {\n    throw new Error('Method not implemented.');\n  }\n\n  async getAbi(_contractId: string): Promise<JsonAbi> {\n    throw Error('Cannot get contractId ABI for a predicate');\n  }\n\n  async hasAbi(_contractId: string): Promise<boolean> {\n    throw Error('A predicate account cannot have an ABI');\n  }\n}\n","export const ETHEREUM_ICON =\n  'data:image/svg+xml;utf8;base64,PHN2ZyB3aWR0aD0iNTEyIiBoZWlnaHQ9IjUxMiIgdmlld0JveD0iMCAwIDUxMiA1MTIiIGZpbGw9Im5vbmUiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyI+CjxwYXRoIGQ9Ik0yNTMgMzM1LjEyMkwyNTUuODg2IDMzOEwzODggMjU5Ljk4N0wyNTUuODg2IDQxTDI1MyA1MC43OTgzVjMzNS4xMjJaIiBmaWxsPSIjMzQzNDM0Ii8+CjxwYXRoIGQ9Ik0yNTYgMzM4VjQxTDEyNCAyNTkuOTg2TDI1NiAzMzhaIiBmaWxsPSIjOEM4QzhDIi8+CjxwYXRoIGQ9Ik0yNTQgNDY1LjI4MUwyNTUuNjI4IDQ3MEwzODggMjg1TDI1NS42MjkgMzYyLjU2M0wyNTQuMDAxIDM2NC41MzJMMjU0IDQ2NS4yODFaIiBmaWxsPSIjM0MzQzNCIi8+CjxwYXRoIGQ9Ik0xMjQgMjg1TDI1NiA0NzBWMzYyLjU2MkwxMjQgMjg1WiIgZmlsbD0iIzhDOEM4QyIvPgo8cGF0aCBkPSJNMjU2IDIwMFYzMzhMMzg4IDI1OS45ODhMMjU2IDIwMFoiIGZpbGw9IiMxNDE0MTQiLz4KPHBhdGggZD0iTTI1NiAyMDBMMTI0IDI1OS45ODhMMjU2IDMzOFYyMDBaIiBmaWxsPSIjMzkzOTM5Ii8+Cjwvc3ZnPgo=';\nexport const TESTNET_URL = 'https://testnet.fuel.network/v1/graphql';\n","export const predicates = {\n  'verification-predicate': {\n    abi: {\n      encoding: '1',\n      types: [\n        {\n          typeId: 0,\n          type: 'b256',\n          components: null,\n          typeParameters: null,\n        },\n        {\n          typeId: 1,\n          type: 'bool',\n          components: null,\n          typeParameters: null,\n        },\n        {\n          typeId: 2,\n          type: 'u64',\n          components: null,\n          typeParameters: null,\n        },\n      ],\n      functions: [\n        {\n          inputs: [\n            {\n              name: 'witness_index',\n              type: 2,\n              typeArguments: null,\n            },\n          ],\n          name: 'main',\n          output: {\n            name: '',\n            type: 1,\n            typeArguments: null,\n          },\n          attributes: null,\n        },\n      ],\n      loggedTypes: [],\n      messagesTypes: [],\n      configurables: [\n        {\n          name: 'SIGNER',\n          configurableType: {\n            name: '',\n            type: 0,\n            typeArguments: null,\n          },\n          offset: 2232,\n        },\n      ],\n    },\n    bytecode: base64ToUint8Array(\n      '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',\n    ),\n  },\n};\n\nfunction base64ToUint8Array(base64: string) {\n  const binaryString = atob(base64);\n  const bytes = new Uint8Array(binaryString.length);\n  for (let i = 0; i < binaryString.length; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  return bytes;\n}\n","import { arrayify } from '@ethersproject/bytes';\nimport {\n  Address,\n  type InputValue,\n  type JsonAbi,\n  Predicate,\n  type Provider,\n  getPredicateRoot,\n} from 'fuels';\nimport memoize from 'memoizee';\nimport type { PredicateConfig } from '../types';\n\nexport class PredicateAccount {\n  private abi: JsonAbi;\n  private bytecode: Uint8Array;\n\n  constructor({ abi, bytecode }: PredicateConfig) {\n    this.abi = abi;\n    this.bytecode = bytecode;\n  }\n\n  getPredicateAddress = memoize((evmAddress: string): string => {\n    const configurable = {\n      SIGNER: Address.fromEvmAddress(evmAddress).toB256(),\n    };\n    // @ts-ignore\n    const { predicateBytes } = Predicate.processPredicateData(\n      this.bytecode,\n      this.abi,\n      configurable,\n    );\n    const address = Address.fromB256(getPredicateRoot(predicateBytes));\n\n    return address.toString();\n  });\n\n  createPredicate = memoize(\n    <TInputData extends InputValue[]>(\n      evmAddress: string,\n      provider: Provider,\n      inputData: TInputData,\n    ): Predicate<TInputData> => {\n      const configurable = {\n        SIGNER: Address.fromEvmAddress(evmAddress).toB256(),\n      };\n      const predicate = new Predicate({\n        bytecode: arrayify(this.bytecode),\n        abi: this.abi,\n        provider,\n        configurableConstants: configurable,\n        inputData,\n      });\n      return predicate;\n    },\n  );\n\n  getEVMAddress(address: string, evmAccounts: Array<string> = []) {\n    return evmAccounts.find(\n      (account) => this.getPredicateAddress(account) === address,\n    );\n  }\n\n  getPredicateAccounts(evmAccounts: Array<string> = []): Array<string> {\n    return evmAccounts.map((account) => this.getPredicateAddress(account));\n  }\n}\n","import { http, type Config, createConfig, injected } from '@wagmi/core';\nimport { mainnet, sepolia } from '@wagmi/core/chains';\nimport { type Web3Modal, createWeb3Modal } from '@web3modal/wagmi';\nimport type { WalletConnectConfig } from '../types';\n\ninterface ModalConfig {\n  wagmiConfig: Config;\n  web3Modal: Web3Modal;\n}\n\nexport function createModalConfig(config: WalletConnectConfig): ModalConfig {\n  const wagmiConfig =\n    config.wagmiConfig ??\n    createConfig({\n      chains: [sepolia, mainnet],\n      transports: {\n        [mainnet.id]: http(),\n        [sepolia.id]: http(),\n      },\n      connectors: [injected({ shimDisconnect: false })],\n    });\n\n  if (!config.projectId) {\n    console.warn(\n      '[WalletConnect Connector]: Get a project ID on https://cloud.walletconnect.com to use WalletConnect features.',\n    );\n  }\n\n  return {\n    wagmiConfig,\n    web3Modal: createWeb3Modal({\n      wagmiConfig: {\n        ...wagmiConfig,\n        // @ts-ignore\n        enableWalletConnect: !!config.projectId,\n      },\n      enableAnalytics: false,\n      projectId: config.projectId ?? '00000000000000000000000000000000',\n    }),\n  };\n}\n","import type { Config as WagmiConfig } from '@wagmi/core';\nimport type { Provider as FuelProvider, JsonAbi } from 'fuels';\n\nexport interface PredicateConfig {\n  abi: JsonAbi;\n  bytecode: Uint8Array;\n}\n\nexport type WalletConnectConfig = {\n  fuelProvider?: FuelProvider | Promise<FuelProvider>;\n  projectId?: string;\n  wagmiConfig?: WagmiConfig;\n  predicateConfig?: PredicateConfig;\n};\n"]}