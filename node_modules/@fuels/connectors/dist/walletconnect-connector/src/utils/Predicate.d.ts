import { type InputValue, Predicate, type Provider } from 'fuels';
import memoize from 'memoizee';
import type { PredicateConfig } from '../types';
export declare class PredicateAccount {
    private abi;
    private bytecode;
    constructor({ abi, bytecode }: PredicateConfig);
    getPredicateAddress: ((evmAddress: string) => string) & memoize.Memoized<(evmAddress: string) => string>;
    createPredicate: (<TInputData extends InputValue[]>(evmAddress: string, provider: Provider, inputData: TInputData) => Predicate<TInputData>) & memoize.Memoized<(<TInputData extends InputValue[]>(evmAddress: string, provider: Provider, inputData: TInputData) => Predicate<TInputData>)>;
    getEVMAddress(address: string, evmAccounts?: Array<string>): string | undefined;
    getPredicateAccounts(evmAccounts?: Array<string>): Array<string>;
}
