import { Config } from '@wagmi/core';
import { Web3Modal } from '@web3modal/wagmi';
import { JsonAbi, Provider, FuelConnector, FuelConnectorEventTypes, ConnectorMetadata, Version, TransactionRequestLike, Asset, Network, AbiMap } from 'fuels';

interface PredicateConfig {
    abi: JsonAbi;
    bytecode: Uint8Array;
}
type WalletConnectConfig = {
    fuelProvider?: Provider | Promise<Provider>;
    projectId?: string;
    wagmiConfig?: Config;
    predicateConfig?: PredicateConfig;
};

declare class WalletConnectConnector extends FuelConnector {
    name: string;
    connected: boolean;
    installed: boolean;
    events: typeof FuelConnectorEventTypes;
    metadata: ConnectorMetadata;
    wagmiConfig: Config;
    ethProvider: unknown | null;
    fuelProvider: Provider | null;
    web3Modal: Web3Modal;
    private predicateAccount;
    private config;
    private _unsubs;
    constructor(config?: WalletConnectConfig);
    configProviders(config?: WalletConnectConfig): Promise<void>;
    /**
     * ============================================================
     * Application communication methods
     * ============================================================
     */
    evmAccounts(): Array<string>;
    setupWatchers(): void;
    destroy(): void;
    getProviders(): Promise<{
        fuelProvider: Provider;
    }>;
    /**
     * ============================================================
     * Connector methods
     * ============================================================
     */
    ping(): Promise<boolean>;
    version(): Promise<Version>;
    requireConnection(): Promise<void>;
    isConnected(): Promise<boolean>;
    connect(): Promise<boolean>;
    disconnect(): Promise<boolean>;
    accounts(): Promise<Array<string>>;
    signMessage(_address: string, _message: string): Promise<string>;
    sendTransaction(address: string, transaction: TransactionRequestLike): Promise<string>;
    currentAccount(): Promise<string | null>;
    addAssets(_assets: Asset[]): Promise<boolean>;
    addAsset(_asset: Asset): Promise<boolean>;
    assets(): Promise<Array<Asset>>;
    addNetwork(_networkUrl: string): Promise<boolean>;
    selectNetwork(_network: Network): Promise<boolean>;
    networks(): Promise<Network[]>;
    currentNetwork(): Promise<Network>;
    addAbi(_abiMap: AbiMap): Promise<boolean>;
    getAbi(_contractId: string): Promise<JsonAbi>;
    hasAbi(_contractId: string): Promise<boolean>;
}

export { type PredicateConfig, type WalletConnectConfig, WalletConnectConnector };
