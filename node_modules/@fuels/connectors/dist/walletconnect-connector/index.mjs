import{require_memoizee as A}from"../chunk-H3OQD3YV.mjs";import{init_esm_shims as t,__toESM as e}from"../chunk-YUDOEGWK.mjs";import{hexToBytes as s}from"@ethereumjs/util";import{splitSignature as n,hexlify as o,arrayify as i}from"@ethersproject/bytes";import{getAccount as r,watchAccount as a,reconnect as c,disconnect as d,createConfig as g,http as Q,injected as B}from"@wagmi/core";import{FuelConnector as h,FuelConnectorEventTypes as E,Provider as u,transactionRequestify as w,Address as l,Predicate as C,getPredicateRoot as I}from"fuels";import{sepolia as m,mainnet as p}from"@wagmi/core/chains";import{createWeb3Modal as M}from"@web3modal/wagmi";t(),t(),t(),t();t();var y={"verification-predicate":{abi:{encoding:"1",types:[{typeId:0,type:"b256",components:null,typeParameters:null},{typeId:1,type:"bool",components:null,typeParameters:null},{typeId:2,type:"u64",components:null,typeParameters:null}],functions:[{inputs:[{name:"witness_index",type:2,typeArguments:null}],name:"main",output:{name:"",type:1,typeArguments:null},attributes:null}],loggedTypes:[],messagesTypes:[],configurables:[{name:"SIGNER",configurableType:{name:"",type:0,typeArguments:null},offset:2232}]},bytecode:function(A){const t=atob(A),e=new Uint8Array(t.length);for(let A=0;A<t.length;A++)e[A]=t.charCodeAt(A);return e}("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")}};t();var U=e(A(),1),f=class{constructor({abi:A,bytecode:t}){this.getPredicateAddress=(0,U.default)((A=>{const t={SIGNER:l.fromEvmAddress(A).toB256()},{predicateBytes:e}=C.processPredicateData(this.bytecode,this.abi,t);return l.fromB256(I(e)).toString()})),this.createPredicate=(0,U.default)(((A,t,e)=>{const s={SIGNER:l.fromEvmAddress(A).toB256()};return new C({bytecode:i(this.bytecode),abi:this.abi,provider:t,configurableConstants:s,inputData:e})})),this.abi=A,this.bytecode=t}getEVMAddress(A,t=[]){return t.find((t=>this.getPredicateAddress(t)===A))}getPredicateAccounts(A=[]){return A.map((A=>this.getPredicateAddress(A)))}};t();var F=class extends h{constructor(A={}){super(),this.name="Ethereum Wallets",this.connected=!1,this.installed=!1,this.events=E,this.metadata={image:"data:image/svg+xml;utf8;base64,PHN2ZyB3aWR0aD0iNTEyIiBoZWlnaHQ9IjUxMiIgdmlld0JveD0iMCAwIDUxMiA1MTIiIGZpbGw9Im5vbmUiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyI+CjxwYXRoIGQ9Ik0yNTMgMzM1LjEyMkwyNTUuODg2IDMzOEwzODggMjU5Ljk4N0wyNTUuODg2IDQxTDI1MyA1MC43OTgzVjMzNS4xMjJaIiBmaWxsPSIjMzQzNDM0Ii8+CjxwYXRoIGQ9Ik0yNTYgMzM4VjQxTDEyNCAyNTkuOTg2TDI1NiAzMzhaIiBmaWxsPSIjOEM4QzhDIi8+CjxwYXRoIGQ9Ik0yNTQgNDY1LjI4MUwyNTUuNjI4IDQ3MEwzODggMjg1TDI1NS42MjkgMzYyLjU2M0wyNTQuMDAxIDM2NC41MzJMMjU0IDQ2NS4yODFaIiBmaWxsPSIjM0MzQzNCIi8+CjxwYXRoIGQ9Ik0xMjQgMjg1TDI1NiA0NzBWMzYyLjU2MkwxMjQgMjg1WiIgZmlsbD0iIzhDOEM4QyIvPgo8cGF0aCBkPSJNMjU2IDIwMFYzMzhMMzg4IDI1OS45ODhMMjU2IDIwMFoiIGZpbGw9IiMxNDE0MTQiLz4KPHBhdGggZD0iTTI1NiAyMDBMMTI0IDI1OS45ODhMMjU2IDMzOFYyMDBaIiBmaWxsPSIjMzkzOTM5Ii8+Cjwvc3ZnPgo=",install:{action:"Install",description:"Install Ethereum Wallet to connect to Fuel",link:"https://ethereum.org/en/wallets/find-wallet/"}},this.ethProvider=null,this.fuelProvider=null,this.config={},this._unsubs=[],this.predicateAccount=new f(A.predicateConfig??y["verification-predicate"]);const{wagmiConfig:t,web3Modal:e}=function(A){const t=A.wagmiConfig??g({chains:[m,p],transports:{[p.id]:Q(),[m.id]:Q()},connectors:[B({shimDisconnect:!1})]});return A.projectId||console.warn("[WalletConnect Connector]: Get a project ID on https://cloud.walletconnect.com to use WalletConnect features."),{wagmiConfig:t,web3Modal:M({wagmiConfig:{...t,enableWalletConnect:!!A.projectId},enableAnalytics:!1,projectId:A.projectId??"00000000000000000000000000000000"})}}(A);this.wagmiConfig=t,this.web3Modal=e,this.configProviders(A),this.setupWatchers()}async configProviders(A={}){this.config=Object.assign(A,{fuelProvider:A.fuelProvider||u.create("https://testnet.fuel.network/v1/graphql")})}evmAccounts(){return r(this.wagmiConfig).addresses}setupWatchers(){this._unsubs.push(a(this.wagmiConfig,{onChange:async A=>{switch(A.status){case"connected":this.emit(this.events.connection,!0),this.emit(this.events.currentAccount,await this.predicateAccount.getPredicateAddress(A.address)),this.emit(this.events.accounts,await this.predicateAccount.getPredicateAccounts(this.evmAccounts()));break;case"disconnected":this.emit(this.events.connection,!1),this.emit(this.events.currentAccount,null),this.emit(this.events.accounts,[])}}}))}destroy(){this._unsubs.forEach((A=>A()))}async getProviders(){if(!this.fuelProvider&&(this.fuelProvider=await this.config.fuelProvider??null,!this.fuelProvider))throw new Error("Fuel provider not found");return{fuelProvider:this.fuelProvider}}async ping(){return await this.configProviders(),!0}async version(){return{app:"0.0.0",network:"0.0.0"}}async requireConnection(){const{state:A}=this.wagmiConfig;"disconnected"===A.status&&A.connections.size>0&&await c(this.wagmiConfig)}async isConnected(){await this.requireConnection();return r(this.wagmiConfig).isConnected||!1}async connect(){return new Promise((A=>{this.web3Modal.open();const t=this.web3Modal.subscribeEvents((async e=>{switch(e.data.event){case"CONNECT_SUCCESS":A(!0),t();break;case"MODAL_CLOSE":case"CONNECT_ERROR":A(!1),t()}}))}))}async disconnect(){const{connector:A}=r(this.wagmiConfig);return await d(this.wagmiConfig,{connector:A}),this.isConnected()}async accounts(){return await this.requireConnection(),this.predicateAccount.getPredicateAccounts(this.evmAccounts())}async signMessage(A,t){throw new Error("A predicate account cannot sign messages")}async sendTransaction(A,t){if(!await this.isConnected())throw Error("No connected accounts");const{fuelProvider:e}=await this.getProviders(),i=e.getChainId(),a=await this.predicateAccount.getEVMAddress(A,this.evmAccounts());if(!a)throw Error(`No account found for ${A}`);const c=w(t),d=this.predicateAccount.createPredicate(a,e,[c.witnesses.length-1]);d.connect(e),await d.provider.estimateTxDependencies(c);const g=d.populateTransactionPredicateData(c);g.inputs.forEach((A=>{"predicate"in A&&A.predicate&&(A.witnessIndex=0)}));const Q=g.getTransactionId(i),B=await(r(this.wagmiConfig).connector?.getProvider()),h=await B.request({method:"personal_sign",params:[Q,a]}),E=n(s(h)).compact;c.witnesses.push(E);const u=await e.estimatePredicates(g);return(await e.operations.submit({encodedTransaction:o(u.toTransactionBytes())})).submit.id}async currentAccount(){if(!await this.isConnected())throw Error("No connected accounts");return r(this.wagmiConfig).address||null}async addAssets(A){throw new Error("Method not implemented.")}async addAsset(A){throw new Error("Method not implemented.")}async assets(){return[]}async addNetwork(A){throw new Error("Method not implemented.")}async selectNetwork(A){throw new Error("Method not implemented.")}async networks(){return[await this.currentNetwork()]}async currentNetwork(){const{fuelProvider:A}=await this.getProviders(),t=A.getChainId();return{url:A.url,chainId:t}}async addAbi(A){throw new Error("Method not implemented.")}async getAbi(A){throw Error("Cannot get contractId ABI for a predicate")}async hasAbi(A){throw Error("A predicate account cannot have an ABI")}};t();export{F as WalletConnectConnector};//# sourceMappingURL=index.mjs.map